################################################################################
#                             Metadata                                         #
################################################################################
openapi: 3.0.0
info:
  title: Community REST API
  description: Community REST API
  version: "1.0"
tags:
  - name: Auth
    description: Authentication API
  - name: Info
    description: Info API
servers:
  - url: http://localhost:8080/
  - url: https://localhost:8080/
################################################################################
#                               Components                                     #
################################################################################
components:
################################################################################
#                               RequestBody                                    #
################################################################################
  requestBodies:
    Role:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Role"
      description: Role Status
      required: true
    ApplicationDetail:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApplicationDetail"
      description: Details of the application
      required: true
    NotificationDetail:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NotificationDetail"
      description: Details of the notification
      required: true
    MemberList:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/MemberList"
################################################################################
#                               Parameters                                     #
################################################################################
  parameters:
    OffsetParam:
      name: offset
      in: query
      description: Offset
      required: true
      schema:
        type: integer
        format: int32
        default: -1
    LimitParam:
      name: limit
      in: query
      description: Negative number means unlimited
      required: true
      schema:
        type: integer
        format: int32
        default: -1
    CommunitySortParam:
      name: sort
      in: query
      description: 
        Sort
          * -updateTime - Sort by update time. Descending.
          * +name - Sort by community's name. Ascending.
      required: true
      schema:
        type: string
    CommunityCategoryParam:
      name: category
      in: query
      description:
        Category of communities
          * all - All kinds of community
          * project - Project community
          * department - Department community
          * general - General community
      required: true
      schema:
        $ref: "#/components/schemas/CommunityCategory"
        default: all
    SearchScopeParam:
      name: scope
      in: query
      description:
        Search scope
          * mineAdmin - My community with admin role
          * mine - My community
          * all - All community
      required: false
      schema:
        $ref: "#/components/schemas/SearchScope"
        default: mine
    SearchTypeParam:
      name: searchType
      in: query
      description: Search type list
      required: false
      explode: true
      schema:
        type: array
        items:
          $ref: "#/components/schemas/SearchType"
        minItems: 1
        maxItems: 4
        uniqueItems: true
    UserIdParam:
      name: userId
      in: query
      description: User id
      required: false
      schema:
        type: string
        default: ""
    ExcludeCommunityStatusParam:
      name: excludeStatus
      in: query
      description: exclude community status
      required: false
      schema:
        type: array
        items:
          $ref: "#/components/schemas/CommunityStatus"
    ForumSortParam:
      name: sort
      in: query
      description: 
        Sort
          * -updateTime - Sort by update time. Descending.
          * -type - Sort by forum's type. Descending.
          * +privilege - Sort by privilege. 
      required: true
      schema:
        type: string
    TopicSortParam:
      name: sort
      in: query
      description: 
        Sort
          * -updateTime - Sort by update time. Descending.
          * +name - Sort by topic's name. Ascending.
          * -type - Sort by topic's type. (system, problem, general)
          * -state - Sort by Topic's state. Descending (unconcluded first)
          * +state - Sort by topic's state. (concluded first)
      required: true
      schema:
        type: string
    MemberSortParam:
      name: sort
      in: query
      description: 
        Sort
          * -role - Sort by role. Descending.
          * +name - Sort by name. Ascending.
      required: true
      schema:
        type: string
        default: "+name"
################################################################################
#                                  Schema                                      #
################################################################################
  schemas:
################################################################################
#                                  Enum                                        #
################################################################################
    NotificationType:
      type: string
      enum:
        - all
        - custom
    CommunityFieldName:
      type: string
      enum:
        - community_id
        - community_name
        - community_desc
        - community_type
        - community_category
        - community_status
        - community_img_banner
        - community_img_avatar
        - community_create_user_id
        - community_create_time
        - community_modified_user_id
        - community_modified_time
        - community_delete_user_id
        - community_delete_time
        - community_last_modified_user_id
        - community_last_modified_time
    ForumFieldName:
      type: string
      enum:
        - forum_id
        - community_id
        - forum_type
        - forum_name
        - forum_desc
        - forum_status
        - forum_img_avatar
        - forum_create_user_id
        - forum_create_time
        - forum_modified_user_id
        - forum_modified_time
        - forum_delete_user_id
        - forum_delete_time
        - forum_last_modified_user_id
        - forum_last_modified_time
    TopicFieldName:
      type: string
      enum:
        - topic_id
        - forum_id
        - topic_title
        - topic_type
        - topic_state
        - topic_status
        - topic_create_user_id
        - topic_create_time
        - topic_modified_user_id
        - topic_modified_time
        - topic_delete_user_id
        - topic_delete_time
        - topic_last_modified_user_id
        - topic_last_modified_time
        - topic_view_count
        - bookmark_create_time
    AttachmentFieldName:
      type: string
      enum:
        - file_name
        - ext_order
        - user_created_time
    SortField:
      type: string
      enum:
        - updateTime
        - name
        - role
        - privilege
        - type
        - state
        - createTime
        - bookmarkCreateTime
        - operationTime
        - relevance
    CommunityType:
      type: string
      enum:
        - public
        - private
        - activity
    ForumType:
      type: string
      enum: &ForumType
      - public
      - private
      - system
    # also update DMSJarvis.CommunityTopicType.java
    TopicType:
      type: string
      enum:
        - general
        - problem
        - system
        - eerpmGeneral
        - eerpmSummary
        - eerpmManual
        - eerpqGeneral
        - eerppGeneral
        - eerpmHighLevel
    SearchScope:
      type: string
      enum: &SearchScope
      - mineAdmin
      - mine
      - all
    CommunityCategory:
      type: string
      enum: &CommunityCategory
      - all
      - project
      - department
      - general
      default: general
    TopicState:
      type: string
      enum:
        - unconcluded
        - concluded
        - briefConcluded
    ReviewAction:
      type: string
      enum: &ReviewAction
      - approved
      - auto-approved
      - rejected
    Identity:
      type: string
      description: 
        Identity of current user
          * admin - Community's administrator
          * member - Member
          * guest - Guest
          * applicant - Guest who has sent the application
          * owner - Forum's owner
          * author - Author
      enum:
        - admin
        - member
        - guest
        - applicant
        - owner
        - author
    Emoji:
      type: string
      enum: &Emoji
      - surprised
      - laugh
      - agree
      - wink
      - like
      - cry
    Access:
      type: string
      enum:
        - accessible
        - application
        - inaccessible
    EmailMemberType:
      type: string
      enum:
        - none
        - allCommunityAdmin
        - allCommunityMember
        - allForumAdmin
        - allForumMember
        - allPublicForumAdmin
        - allPublicForumMember
        - allPrivateForumAdmin
        - allPrivateForumMember
    EmailType:
      type: string
      enum:
        - communityCreationReview
        - communityCreationApplication
        - communityCreationApproval
        - communityCreationRejection
        - communityJoinApplication
        - forumJoinApplication
        - communityJoinApproval
        - communityJoinRejection
        - forumJoinApproval
        - forumJoinRejection
        - joinCommunity
        - joinForum
        - removeFromCommunity
        - removeFromForum
        - communityNotification
        - forumNotification
        - communityDeletion
        - communityDeletionApplication
        - communityDeletionApproval
        - communityDeletionRejection
        - forumDeletion
        - topicNotification
        - conclusionMade
    DdfRole:
      type: string
      enum:
        - Author
        - Creator
        - SystemAdmin
        - ApplAssignedCreator
        - ApplAssignedModifier
        - ConclusionAuthor
        - Searcher
    GroupUserField:
      type: string
      enum:
        - banner
        - avatar
        - basicInfo
        - officeInfo
        - followInfo
        - reviewInfo
        - skill
        - project
    SearchType:
      type: string
      enum: &SearchType
      - community
      - forum
      - topic
      - attachment
    Privilege:
      type: string
      enum:
        - read
    CommunityStatus:
      type: string
      enum:
        - open
        - delete
        - locked
        - closed
    MemberType:
      type: string
      enum:
        - all
        - admin
        - member
    TopicStatus:
      type: string
      enum:
        - open
        - delete
        - locked
    TopicSituation:
      type: string
      enum:
        - sealed
        - normal
    ReplyStatus:
      type: string
      enum:
        - open
        - delete
        - locked
    ForumStatus:
      type: string
      enum:
        - open
        - delete
        - locked
    FileType:
      type: string
      enum:
        - IMG
        - TXT
        - OFFICE
        - EXCEL
        - PPT
        - WORD
        - VIDEO
        - PDF
        - OTHERS
    FileIcon:
      type: string
      enum:
        - IMG
        - TXT
        - EXCEL
        - PPT
        - WORD
        - VIDEO
        - PDF
        - OTHER
    PermissionObject:
      type: string
      enum:
        - community
        - communityMember
        - publicForum
        - privateForum
        - publicForumTopic
        - privateForumTopic
        - publicForumReply
        - privateForumReply
        - publicForumAttachment
        - privateForumAttachment
        - conclusion
        - forumMember
        - system
        - activeTopic
        - activeReply
    Operation:
      type: string
      enum:
        - create
        - read
        - update
        - delete
        - download
        - review
        - notify
        - login
        - upload
        - pin
        - click
        - move
        - lock
        - close
        - reopen
    TemplateType:
      type: string
      enum:
        - bothMail
        - topic
        - forum
        - community
        - eerpMail
        - eerpmHighLevelMail
    DdfType:
      type: string
      enum:
        - community
        - forum
        - topic
        - file
    DdfQueueAction:
      type: string
      enum:
        - update
        - delete
    PqmRole:
      type: string
      enum:
        - me
        - qc
        - te
    PqmClassification:
      type: string
      enum:
        - maintenance
        - adjustment
        - commandSystem
    PqmType:
      type: string
      enum:
        - manual
        - s2m
        - s2s
    PqmObject:
      type: string
      enum:
        - none
        - equipment
        - system
    NotificationStatus:
      type: string
      enum:
        - unread
        - read
    DeltaPointType:
      type: string
      enum:
      - thisWeek
      - thisMonth
      - threeMonths
    PinEnum:
      type: string
      enum:
        - pin
        - unpin
    UserStatus:
      type: string
      enum:
        - active
        - inactive
      default: active
    DiaClassification:
      type: string
      enum:
        - Manufacturing
        - IP
        - New Product
        - New Business Model / New Business Process
    GeneralStatus:
      type: string
      enum:
        - success
        - fail
    DiaErrorMessage:
      type: string
      enum:
        - error.dia.forbidden
        - error.dia.category.invalid
        - error.dia.action.invalid
        - error.dia.teammember.invalid
        - error.dia.attachment.invalid
        - error.dia.attachment.duplicate
        - error.dia.insert.fail
    DiaMemberType:
      type: string
      enum:
        - teamMembers
        - teamLeader
        - contactWindow
    ConclusionAlertMemberType:
      type: string
      enum:
        - group
        - user
    EerpqCodeType:
      type: string
      enum:
        - phenomenonCode
        - failureCode
        - dutyCode
        - reasonCode
        - solutionCode
    FilterSource:
      type: string
      enum:
        - forum
        - topicType
        - conclusionState
    EerpType:
      type: string
      enum:
        - p
        - q
        - m
    MedalType:
      type: string
      enum:
        - COMMUNITY
        - USER
    AlertRuleType:
      type: string
      enum:
        - general
        - high
    # 參考前端元件的key (前端不需多mapping)
    TopicOperation:
      type: string
      enum:
        - topicSetTopping
        - topicSetNormal
        - topicNotify
        - topicLocked
        - topicEdit
        - topicMove
        - topicDelete
        - replyCreate
        - conclusionCreate
        - replyReportGenerate
    # 參考前端元件的key (前端不需多mapping)
    ReplyOperation:
      type: string
      enum:
        - replyEdit
        - replyDelete
        - replyChildCreate
        - replyChildEdit
        - replyChildDelete
        - conclusionEdit
################################################################################
#                                   Object                                     #
################################################################################
    SimpleGroupWithUsers:
      type: object
      required:
        - value
        - label
      properties:
        value:
          type: string
        label:
          type: string
        orgGroupType:
          type: string
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
    AuthenticationToken:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    NotificationDetail:
      type: object
      required:
        - type
        - subject
        - content
      properties:
        type:
          $ref: "#/components/schemas/NotificationType"
        subject:
          type: string
        content:
          type: string
        recipient:
          type: array
          items:
            type: string
        orgMembers:
          type: array
          items:
            $ref: "#/components/schemas/SimpleGroupWithUsers"
        bgbus:
          type: array
          items:
            $ref: "#/components/schemas/SimpleGroupWithUsers"
    Info:
      type: object
      properties:
        serverName:
          type: string
          default: ""
        version:
          type: object
          additionalProperties:
            type: string
    EmailInfo:
      type: object
      properties:
        recipient:
          type: string
        subject:
          type: string
        content:
          type: string
        priority:
          type: integer
          format: int32
          default: 3
    ApplicationDetail:
      type: object
      required:
        - subject
        - desc
      properties:
        subject:
          type: string
          default: ""
        desc:
          type: string
          default: ""
    User:
      type: object
      properties:
        id:
          type: string
          default: ""
        name:
          type: string
          default: ""
        mail:
          type: string
          default: ""
        lock:
          type: boolean
          default: false
        roleId:
          type: integer
          format: int32
          default: 0
        totalCount:
          type: integer
          format: int32
          default: 0
        status:
          $ref: "#/components/schemas/UserStatus"
    UserSession:
      type: object
      properties:
        Common.UUID:
          type: string
          default: ""
        Common.Name:
          type: string
          default: ""
        Common.Image:
          type: string
          default: ""
        Profile.Mail:
          type: string
          default: ""
        Profile.SAMAccount:
          type: string
          default: ""
        Profile.Phone:
          type: string
          default: ""
        Profile.Office:
          type: string
          default: ""
        Profile.DeptName:
          type: string
          default: ""
        Profile.Ename:
          type: string
          default: ""
        Profile.Cname:
          type: string
          default: ""
        status:
          type: string
          default: active
        group:
          type: array
          items:
            type: string
        isSystemAdmin:
          type: boolean
        systemAdminExpiredTime:
          type: integer
          format: int64
        medal:
          type: string
          default: ""
        certificates:
          type: array
          items:
            type: string
        title:
          type: string
          default: ""
        medalId:
          format: int32
          default: 0
        employeeType:
          type: string
          default: ""
    AppInfo:
      type: object
      properties:
        isSystemAdmin:
          type: boolean
    EmailContext:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/EmailType"
        to:
          type: array
          items:
            type: string
        subject:
          type: string
          default: ""
        desc:
          type: string
          default: ""
        content:
          type: string
          default: ""
        communityId:
          type: integer
          format: int32
          default: 0
        communityName:
          type: string
          default: ""
        forumId:
          type: integer
          format: int32
          default: 0
        forumName:
          type: string
          default: ""
    IdNameDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          default: ""
    CommunityListDetail:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        desc:
          type: string
        category:
          type: string
        lastModifiedUser:
          $ref: "#/components/schemas/User"
        lastModifiedTime:
          type: integer
          format: int64
        imgAvatar:
          type: string
        member:
          type: array
          items:
            $ref: "#/components/schemas/User"
    CommunitySearchResult:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: "#/components/schemas/CommunityListDetail"
        numFound:
          type: integer
          format: int32
    ApplicantDetail:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        department:
          type: string
        ext:
          type: string
        desc:
          type: string
        imgAvatar:
          type: string
    AutoCompleteUser:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        department:
          type: string
          default: ""
        ext:
          type: string
          default: ""
        mail:
          type: string
          default: ""
        imgAvatar:
          type: string
          default: ""
        status:
          $ref: "#/components/schemas/UserStatus"
    MemberInfoDetail:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        department:
          type: string
          default: ""
        ext:
          type: string
          default: ""
        mail:
          type: string
          default: ""
        imgAvatar:
          type: string
          default: ""
        status:
          $ref: "#/components/schemas/UserStatus"
        isAdmin:
          type: boolean
          default: false
    MembersTableViewDetail:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        department:
          type: string
          default: ""
        imgAvatar:
          type: string
          default: ""
        src:
          type: string
          default: ""
        status:
          $ref: "#/components/schemas/UserStatus"
        isAdmin:
          type: boolean
          default: false
        isFromMyDMS:
          type: boolean
          default: false
        lock:
          type: boolean
          default: false
        customGroupNames:
          type: array
          items:
            type: string
    MemberListResult:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: "#/components/schemas/MemberInfoDetail"
        numFound:
          type: integer
          format: int32
    MembersTableViewResult:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: "#/components/schemas/MembersTableViewDetail"
        numFound:
          type: integer
          format: int64
    CreatedCommunityData:
      type: object
      properties:
        name:
          type: string
          minLength: 0
          maxLength: 255
        desc:
          type: string
          minLength: 0
          maxLength: 255
        type:
          type: string
          enum:
            - public
            - private
            - activity
        status:
          $ref: "#/components/schemas/CommunityStatus"
        admins:
          type: array
          items:
            type: string
        members:
          type: array
          items:
            type: string
        category:
          $ref: "#/components/schemas/CommunityCategory"
        notificationType:
          $ref: "#/components/schemas/NotificationType"
    ApprovalStatus:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/ReviewAction"
        rejectedMessage:
          type: string
          default: ""
          minLength: 0
          maxLength: 255
    Image:
      type: object
      properties:
        image:
          type: string
    AvatarImage:
      allOf:
        - $ref: "#/components/schemas/Image"
      type: object
      properties:
        medalId:
          type: integer
          format: int32
    ForumSearchResult:
      type: object
      properties:
        toppingResult:
          type: array
          items:
            $ref: "#/components/schemas/ForumListDetail"
        result:
          type: array
          items:
            $ref: "#/components/schemas/ForumListDetail"
        numFound:
          type: integer
          format: int32
    ForumListDetail:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        desc:
          type: string
        type:
          $ref: "#/components/schemas/ForumType"
        admins:
          type: array
          items:
            $ref: "#/components/schemas/User"
        lastModifiedUser:
          $ref: "#/components/schemas/User"
        lastModifiedTime:
          type: integer
          format: int64
        modifiedTime:
          type: integer
          format: int64
        access:
          $ref: "#/components/schemas/Access"
        tag:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        toppingOrder:
          type: integer
          format: int32
          default: 0
    TopicCreationData:
      allOf:
        - $ref: "#/components/schemas/ExtraRecipient"
      type: object
      required:
        - forumId
        - title
        - type
        - appField
      properties:
        forumId:
          type: integer
          format: int32
        title:
          type: string
        tag:
          type: array
          items:
            type: string
        type:
          $ref: "#/components/schemas/TopicType"
        text:
          type: string
        attachment:
          type: array
          items:
            $ref: "#/components/schemas/AttachmentWithAuthor"
        notificationType:
          $ref: "#/components/schemas/NotificationType"
        recipient:
          type: array
          items:
            type: string
        appField:
          type: array
          items:
            $ref: "#/components/schemas/LabelValueDto"
    AttachmentWithAuthor:
      allOf:
        - $ref: "#/components/schemas/VideoLanguageDto"
        - type: object
          properties:
            id:
              type: string
            author:
              type: array
              items:
                type: string
              minItems: 1
            appField:
              type: array
              items:
                $ref: "#/components/schemas/LabelValueDto"
            recordType:
              type: string
    TopicUpdatedData:
      allOf:
        - $ref: "#/components/schemas/ExtraRecipient"
      type: object
      required:
        - title
        - type
        - appField
      properties:
        title:
          type: string
        tag:
          type: array
          items:
            type: string
        type:
          $ref: "#/components/schemas/TopicType"
        text:
          type: string
        attachment:
          type: array
          items:
            $ref: "#/components/schemas/AttachmentWithAuthor"
        notificationType:
          $ref: "#/components/schemas/NotificationType"
        recipient:
          type: array
          items:
            type: string
        modifiedTime:
          type: integer
          format: int64
        appField:
          type: array
          items:
            $ref: "#/components/schemas/LabelValueDto"
    TopicSearchResult:
      type: object
      properties:
        toppingResult:
          type: array
          items:
            $ref: "#/components/schemas/TopicListDetail"
        result:
          type: array
          items:
            $ref: "#/components/schemas/TopicListDetail"
        numFound:
          type: integer
          format: int32
          default: 0
    TopicListDetail:
      type: object
      properties:
        id:
          type: integer
          format: int32
        title:
          type: string
        type:
          $ref: "#/components/schemas/TopicType"
        state:
          $ref: "#/components/schemas/TopicState"
        status:
          $ref: "#/components/schemas/TopicStatus"
        situation:
          $ref: "#/components/schemas/TopicSituation"
        createUser:
          $ref: "#/components/schemas/User"
        lastModifiedUser:
          $ref: "#/components/schemas/User"
        lastModifiedTime:
          type: integer
          format: int64
        belongForum:
          $ref: "#/components/schemas/IdNameDto"
        identity:
          $ref: "#/components/schemas/Identity"
        toppingOrder:
          type: integer
          format: int32
          default: 0
    ReplySearchResult:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: "#/components/schemas/ReplyListDetail"
        numFound:
          type: integer
          format: int32
    ReplyListDetail:
      allOf:
        - $ref: "#/components/schemas/ExtraRecipient"
      type: object
      properties:
        id:
          type: integer
          format: int32
        index:
          type: integer
          format: int32
        status:
          $ref: "#/components/schemas/ReplyStatus"
        author:
          $ref: "#/components/schemas/UserSession"
        text:
          type: string
        attachment:
          type: array
          items:
            $ref: "#/components/schemas/Attachment"
        notificationType:
          type: string
        recipient:
          type: array
          items:
            $ref: "#/components/schemas/User"
        createTime:
          type: integer
          format: int64
        emoji:
          type: object
          additionalProperties:
            type: integer
            format: int32
        identity:
          $ref: "#/components/schemas/Identity"
        userEmoji:
          type: string
          default: ""
        modifiedTime:
          type: integer
          format: int64
        respondee:
          $ref: "#/components/schemas/User"
        kidNumFound:
          type: integer
          format: int32
          default: 0
    FileConversionStatus:
      type: object
      properties:
        asyncStatus:
          type: string
    Attachment:
      allOf:
        - $ref: "#/components/schemas/VideoLanguageDto"
        - $ref: "#/components/schemas/VideoIdDto"
        - type: object
          properties:
            id:
              type: string
              default: ""
            name:
              type: string
              default: ""
            fileExt:
              type: string
              default: ""
            thumbnail:
              type: string
              default: ""
            author:
              type: array
              items:
                $ref: "#/components/schemas/User"
            modifiedTime:
              type: integer
              format: int64
              default: 0
            refUrl:
              type: string
              default: ""
            size:
              type: integer
              format: int64
              default: 0
            appField:
              type: array
              items:
                $ref: "#/components/schemas/LabelValueDto"
            recordType:
              type: string
    CommunityHomePage:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        desc:
          type: string
        type:
          $ref: "#/components/schemas/CommunityType"
        category:
          $ref: "#/components/schemas/CommunityCategory"
        status:
          $ref: "#/components/schemas/CommunityStatus"
        admins:
          type: array
          items:
            $ref: "#/components/schemas/User"
        members:
          type: array
          items:
            $ref: "#/components/schemas/User"
        NumberOfAdmin:
          type: integer
          format: int32
        NumberOfMember:
          type: integer
          format: int32
        NumberOfForum:
          type: integer
          format: int32
        NumberOfTopic:
          type: integer
          format: int32
        identity:
          $ref: "#/components/schemas/Identity"
        communityModifiedTime:
          type: integer
          format: int64
        communityCreateTime:
          type: integer
          format: int64
        groupId:
          type: string
        dependentGroupCount:
          type: Integer
        notificationType:
          type: string
        filter:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: "#/components/schemas/KeyLabelDto"
        dashboard:
          type: boolean
          default: false
    CommunityReviewDetail:
      type: object
      properties:
        batchId:
          type: integer
          format: int32
        communityName:
          type: string
        communityDesc:
          type: string
        applicantId:
          type: string
        applicantName:
          type: string
          default: ""
        applicationTime:
          type: integer
          format: int64
        reviewerId:
          type: string
        reviewerName:
          type: string
          default: ""
        reviewTime:
          type: integer
          format: int64
        status:
          type: string
        rejectedMessage:
          type: string
          default: ""
    CommunityReviewList:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: "#/components/schemas/CommunityReviewDetail"
        numFound:
          type: integer
          format: int32
    ForumData:
      type: object
      properties:
        communityId:
          type: integer
          format: int32
        name:
          type: string
          minLength: 0
          maxLength: 255
        tag:
          type: array
          items:
            type: string
        type:
          $ref: "#/components/schemas/ForumType"
        status:
          $ref: "#/components/schemas/ForumStatus"
        admins:
          type: array
          items:
            type: string
        members:
          type: array
          items:
            type: string
    ForumStatusInput:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/ForumStatus"
    Role:
      type: object
      properties:
        role:
          $ref: "#/components/schemas/Identity"
    ForumHomePage:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        desc:
          type: string
        type:
          $ref: "#/components/schemas/ForumType"
        status:
          $ref: "#/components/schemas/ForumStatus"
        communityId:
          type: integer
          format: int32
        communityName:
          type: string
        communityCategory:
          $ref: "#/components/schemas/CommunityCategory"
        admins:
          type: array
          items:
            $ref: "#/components/schemas/User"
        members:
          type: array
          items:
            $ref: "#/components/schemas/User"
        numberOfAdmin:
          type: integer
          format: int32
        numberOfMember:
          type: integer
          format: int32
        identity:
          $ref: "#/components/schemas/Identity"
        tag:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        forumModifiedTime:
          type: integer
          format: int64
        toppingOrder:
          type: integer
          format: int32
          default: 0
        supportTopicType:
          type: array
          items:
            $ref: "#/components/schemas/SupportTopicType"
        conclusionAlert:
          type: boolean
        filter:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: "#/components/schemas/KeyLabelDto"
    TopicHomePage:
      allOf:
        - $ref: "#/components/schemas/ExtraRecipient"
      type: object
      properties:
        id:
          type: integer
          format: int32
        title:
          type: string
        state:
          $ref: "#/components/schemas/TopicState"
        status:
          $ref: "#/components/schemas/TopicStatus"
        situation:
          $ref: "#/components/schemas/TopicSituation"
        type:
          $ref: "#/components/schemas/TopicType"
        author:
          $ref: "#/components/schemas/UserSession"
        admins:
          type: array
          items:
            $ref: "#/components/schemas/User"
        members:
          type: array
          items:
            $ref: "#/components/schemas/User"
        attachment:
          type: array
          items:
            $ref: "#/components/schemas/Attachment"
        notificationType:
          type: string
        recipient:
          type: array
          items:
            $ref: "#/components/schemas/User"
        createTime:
          type: integer
          format: int64
        emoji:
          type: object
          additionalProperties:
            type: integer
            format: int32
        numberOfReply:
          type: integer
          format: int32
        viewCount:
          type: integer
          format: int32
        tag:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        text:
          type: string
        forumId:
          type: integer
          format: int32
        forumName:
          type: string
        forumSupportTopicType:
          type: array
          items:
            $ref: "#/components/schemas/SupportTopicType"
        communityId:
          type: integer
          format: int32
        communityName:
          type: string
        communityCategory:
          $ref: "#/components/schemas/CommunityCategory"
        communityType:
          $ref: "#/components/schemas/CommunityType"
        identity:
          $ref: "#/components/schemas/Identity"
        userEmoji:
          type: string
          default: ""
        modifiedTime:
          type: integer
          format: int64
        userBookmark:
          type: boolean
          default: false
        toppingOrder:
          type: integer
          format: int32
          default: 0
        forumType:
          $ref: "#/components/schemas/ForumType"
        appField:
          type: array
          items:
            $ref: "#/components/schemas/LabelValueDto"
    Tag:
      type: object
      properties:
        label:
          type: string
    UpdatedCommunityData:
      type: object
      properties:
        name:
          type: string
          minLength: 0
          maxLength: 255
        desc:
          type: string
          minLength: 0
          maxLength: 255
        type:
          type: string
          enum:
            - public
            - private
            - activity
        status:
          $ref: "#/components/schemas/CommunityStatus"
        admins:
          type: array
          items:
            type: string
        category:
          $ref: "#/components/schemas/CommunityCategory"
        communityModifiedTime:
          type: integer
          format: int64
        notificationType:
          $ref: "#/components/schemas/NotificationType"
    UpdatedForumData:
      type: object
      properties:
        communityId:
          type: integer
          format: int32
        name:
          type: string
          minLength: 0
          maxLength: 255
        tag:
          type: array
          items:
            type: string
        type:
          $ref: "#/components/schemas/ForumType"
        status:
          $ref: "#/components/schemas/ForumStatus"
        admins:
          type: array
          items:
            type: string
        members:
          type: array
          items:
            type: string
        forumModifiedTime:
          type: integer
          format: int64
    ReplyCreationData:
      allOf:
        - $ref: "#/components/schemas/ExtraRecipient"
      type: object
      required:
        - forumId
        - text
      properties:
        forumId:
          type: integer
          format: int32
        followReplyId:
          type: integer
          format: int32
        text:
          type: string
        attachment:
          type: array
          items:
            $ref: "#/components/schemas/AttachmentWithAuthor"
        notificationType:
          $ref: "#/components/schemas/NotificationType"
        recipient:
          type: array
          items:
            type: string
        respondee:
          type: string
          default: ""
    ReplyConclusionCreationData:
      allOf:
        - $ref: "#/components/schemas/ExtraRecipient"
      type: object
      required:
        - topicType
        - forumId
        - jsonData
      properties:
        topicType:
          $ref: "#/components/schemas/TopicType"
        forumId:
          type: integer
          format: int32
        followReplyId:
          type: integer
          format: int32
        jsonData:
          type: string
        attachment:
          type: array
          items:
            $ref: "#/components/schemas/AttachmentWithAuthor"
        notificationType:
          $ref: "#/components/schemas/NotificationType"
        recipient:
          type: array
          items:
            type: string
        seal:
          type: boolean
          default: false
        forceConclude:
          type: boolean
          default: false
    PreviewData:
      type: object
      properties:
        name:
          type: string
          default: ""
        createTime:
          type: integer
          format: int64
          default: 0
        fileExt:
          type: string
          default: ""
        createUserName:
          type: string
          default: ""
        authorNames:
          type: array
          items:
            type: string
          default: []
        editorNames:
          type: array
          items:
            type: string
          default: []
        onlinePDF:
          $ref: "#/components/schemas/OnlinePDF"
        fileType:
          $ref: "#/components/schemas/FileType"
        asyncStatus:
          type: string
          description: 
             Value can be CONVERTING, DONE, FAIL, QUEUED, UNKNOWN
    PreviewDataWithStatus:
      type: object
      properties:
        status:
          type: integer
          format: int32
        data:
          $ref: "#/components/schemas/PreviewData"
    OnlinePDF:
      type: object
      properties:
        totalPage:
          type: integer
          format: int32
          default: 0
        baseHTML:
          type: string
          default: ""
        pages:
          type: array
          items:
            $ref: "#/components/schemas/PagingData"
    PagingData:
      type: object
      properties:
        pageNo:
          type: integer
          format: int32
        content:
          type: string
    RichTextImage:
      type: object
      properties:
        text:
          type: string
        refIds:
          type: array
          items:
            type: string
    DownloadFile:
      type: object
      properties:
        name:
          type: string
        ext:
          type: string
        data:
          type: string
          format: byte
    ReplyUpdatedData:
      allOf:
        - $ref: "#/components/schemas/ExtraRecipient"
      type: object
      required:
        - text
      properties:
        text:
          type: string
        attachment:
          type: array
          items:
            $ref: "#/components/schemas/AttachmentWithAuthor"
        notificationType:
          $ref: "#/components/schemas/NotificationType"
        recipient:
          type: array
          items:
            type: string
        modifiedTime:
          type: integer
          format: int64
        respondee:
          type: string
          default: ""
    ReplyConclusionUpdatedData:
      allOf:
        - $ref: "#/components/schemas/ExtraRecipient"
      type: object
      required:
        - topicType
        - jsonData
        - modifiedTime
      properties:
        topicType:
          $ref: "#/components/schemas/TopicType"
        jsonData:
          type: string
        attachment:
          type: array
          items:
            $ref: "#/components/schemas/AttachmentWithAuthor"
        notificationType:
          $ref: "#/components/schemas/NotificationType"
        recipient:
          type: array
          items:
            type: string
        modifiedTime:
          type: integer
          format: int64
        seal:
          type: boolean
          default: false
    EmailWithChineseAndEnglishContext:
      type: object
      properties:
        extraMemberType:
          $ref: "#/components/schemas/EmailMemberType"
        type:
          $ref: "#/components/schemas/EmailType"
        sender:
          type: string
          default: ""
        creator:
          type: string
          default: ""
        to:
          type: array
          items:
            type: string
        subject:
          type: string
          default: ""
        desc:
          type: string
          default: ""
        englishDesc:
          type: string
          default: ""
        content:
          type: string
          default: ""
        link:
          type: string
          default: ""
        mobileLink:
          type: string
          default: ""
        priority:
          type: integer
          format: int32
          default: 3
        param:
          type: object
          additionalProperties:
            type: object
        communityInfo:
          type: object
        forumInfo:
          type: object
    AttachmentDetail:
      type: object
      properties:
        id:
          type: string
          default: ""
        communityId:
          type: integer
          format: int32
          default: 0
        forumId:
          type: integer
          format: int32
          default: 0
        forumName:
          type: string
          default: ""
        forumType:
          $ref: "#/components/schemas/ForumType"
        modifiedTime:
          type: integer
          format: int64
          default: 0
        topicId:
          type: integer
          format: int32
          default: 0
        topicTitle:
          type: string
          default: ""
        fileName:
          type: string
          default: ""
        fileExt:
          type: string
          default: ""
        fileIcon:
          type: string
          default: ""
        refUrl:
          type: string
          default: ""
    DdfQueue:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/DdfType"
        id:
          type: integer
          format: int32
    AllInformation:
      type: object
      properties:
        communityId:
          type: integer
          format: int32
          default: 0
        communityName:
          type: string
          default: ""
        communityEname:
          type: string
          default: ""
        communityDesc:
          type: string
          default: ""
        communityStatus:
          type: string
          default: ""
        communityType:
          $ref: "#/components/schemas/CommunityType"
        communityCategory:
          $ref: "#/components/schemas/CommunityCategory"
        communityMemberCount:
          type: integer
          format: int32
          default: 0
        communityCreateUserId:
          type: string
          default: ""
        communityCreateTime:
          type: integer
          format: int64
          default: 0
        communityModifiedTime:
          type: integer
          format: int64
          default: 0
        communityLastModifiedUserId:
          type: string
          default: ""
        communityLastModifiedTime:
          type: integer
          format: int64
          default: 0
        communityGroupId:
          type: string
          default: ""
        communityDdfId:
          type: string
          default: ""
        forumId:
          type: integer
          format: int32
          default: 0
        forumName:
          type: string
          default: ""
        forumDesc:
          type: string
          default: ""
        forumStatus:
          type: string
          default: ""
        forumType:
          $ref: "#/components/schemas/ForumType"
        forumCreateUserId:
          type: string
          default: ""
        forumCreateTime:
          type: integer
          format: int64
          default: 0
        forumModifiedTime:
          type: integer
          format: int64
          default: 0
        forumLastModifiedUserId:
          type: string
          default: ""
        forumLastModifiedTime:
          type: integer
          format: int64
          default: 0
        forumDdfId:
          type: string
          default: ""
        topicId:
          type: integer
          format: int32
          default: 0
        topicTitle:
          type: string
          default: ""
        topicText:
          type: string
          default: ""
        topicStatus:
          type: string
          default: ""
        topicShowState:
          type: boolean
          default: false
        topicType:
          $ref: "#/components/schemas/TopicType"
        topicState:
          $ref: "#/components/schemas/TopicState"
        topicSituation:
          $ref: "#/components/schemas/TopicSituation"
        topicCreateUserId:
          type: string
          default: ""
        topicCreateTime:
          type: integer
          format: int64
          default: 0
        topicModifiedTime:
          type: integer
          format: int64
          default: 0
        topicLastModifiedUserId:
          type: string
          default: ""
        topicLastModifiedTime:
          type: integer
          format: int64
          default: 0
        topicDdfId:
          type: string
          default: ""
    AttachedCommunityData:
      type: object
      properties:
        groupId:
          type: string
        createUserId:
          type: string
    GroupData:
      type: object
      properties:
        id:
          type: string
          default: ""
        name:
          type: string
          default: ""
        members:
          type: array
          items:
            $ref: "#/components/schemas/User"
        groupList:
          type: array
          items:
            type: string
    UpdateAttachedCommunityData:
      type: object
      properties:
        updateUserId:
          type: string
    LatestTopic:
      type: object
      properties:
        topicId:
          type: integer
          format: int32
        forumId:
          type: integer
          format: int32
        communityId:
          type: integer
          format: int32
        communityAvatar:
          type: string
        topicTitle:
          type: string
        topicType:
          $ref: "#/components/schemas/TopicType"
        topicState:
          $ref: "#/components/schemas/TopicState"
        topicSituation:
          $ref: "#/components/schemas/TopicSituation"
        lastModifiedUser:
          $ref: "#/components/schemas/User"
        lastModifiedTime:
          type: integer
          format: int64
        replyCount:
          type: integer
          format: int32
          default: 0
    ActivityLogData:
      type: object
      properties:
        id:
          type: integer
          format: int32
        userId:
          type: string
        operation:
          type: string
        object:
          type: string
        objectPk:
          type: integer
          format: int32
        operationTime:
          type: integer
          format: int64
        origin:
          type: string
          default: community
        content:
          type: string
          default: ""
        attachmentId:
          type: string
          default: ""
    MyDmsGroupData:
      type: object
      properties:
        groupId:
          type: string
          default: ""
        groupName:
          type: string
          default: ""
        groupType:
          type: string
          default: ""
        groupDesc:
          type: string
          default: ""
    ResponseData:
      type: object
      properties:
        statusCode:
          type: integer
          format: int32
        id:
          type: integer
          format: int32
    TopicPqmData:
      allOf:
        - $ref: "#/components/schemas/ExtraRecipient"
      type: object
      required:
        - forumId
        - title
        - type
      properties:
        forumId:
          type: integer
          format: int32
        tag:
          type: array
          items:
            type: string
        text:
          type: string
        notificationType:
          $ref: "#/components/schemas/NotificationType"
        recipient:
          type: array
          items:
            type: string
    DeleteApplicationDetail:
      type: object
      properties:
        communityId:
          type: integer
          format: int32
        communityName:
          type: string
          default: ""
        applicantId:
          type: string
        applicantName:
          type: string
          default: ""
        applicationSubject:
          type: string
        applicationDesc:
          type: string
        applicationTime:
          type: integer
          format: int64
        reviewerId:
          type: string
        reviewerName:
          type: string
          default: ""
        reviewTime:
          type: integer
          format: int64
        status:
          type: string
    DeleteApplicationResult:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: "#/components/schemas/DeleteApplicationDetail"
        numFound:
          type: integer
          format: int32
    TopicInformationOfBookmark:
      type: object
      properties:
        topicId:
          type: integer
          format: int32
        forumId:
          type: integer
          format: int32
        topicTitle:
          type: string
        topicType:
          type: string
        topicState:
          type: string
        topicStatus:
          type: string
        topicSituation:
          type: string
        topicCreateUserId:
          type: string
        topicLastModifiedUserId:
          type: string
        topicLastModifiedTime:
          type: integer
          format: int64
        topicText:
          type: string
        communityId:
          type: integer
          format: int32
        communityName:
          type: string
    TopicListDetailOfBookmark:
      type: object
      properties:
        id:
          type: integer
          format: int32
        title:
          type: string
        text:
          type: string
        type:
          $ref: "#/components/schemas/TopicType"
        state:
          $ref: "#/components/schemas/TopicState"
        status:
          $ref: "#/components/schemas/TopicStatus"
        createUser:
          $ref: "#/components/schemas/User"
        lastModifiedUser:
          $ref: "#/components/schemas/User"
        lastModifiedTime:
          type: integer
          format: int64
        belongForum:
          $ref: "#/components/schemas/IdNameDto"
        belongCommunity:
          $ref: "#/components/schemas/IdNameDto"
    TopicResultOfBookmark:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: "#/components/schemas/TopicListDetailOfBookmark"
        numFound:
          type: integer
          format: int32
    PrivilegedCommunityForum:
      type: object
      required:
        - userId
        - communityId
        - forumId
        - forumName
      properties:
        userId:
          type: string
        communityId:
          type: integer
        forumId:
          type: integer
        forumName:
          type: string
    Notification:
      type: object
      properties:
        id:
          type: integer
          format: int32
          default: 0
        userId:
          type: string
          default: ""
        type:
          $ref: "#/components/schemas/EmailType"
        extraMemberType:
          $ref: "#/components/schemas/EmailMemberType"
        status:
          $ref: "#/components/schemas/NotificationStatus"
        state:
          type: string
          default: ""
        title:
          type: string
          default: ""
        content:
          type: string
          default: ""
        time:
          type: integer
          format: int64
        priority:
          type: integer
          format: int32
          default: 3
        communityId:
          type: integer
          format: int32
          default: 0
        communityName:
          type: string
          default: ""
        communityCategory:
          $ref: "#/components/schemas/CommunityCategory"
        forumId:
          type: integer
          format: int32
          default: 0
        forumName:
          type: string
          default: ""
        forumType:
          $ref: "#/components/schemas/ForumType"
        topicId:
          type: integer
          format: int32
          default: 0
        topicTitle:
          type: string
          default: ""
        topicType:
          $ref: "#/components/schemas/TopicType"
        senderId:
          type: string
          default: ""
        forumCreatedById:
          type: string
          default: ""
    PublishMessage:
      type: object
      properties:
        id:
          type: integer
          format: int32
          default: 0
        type:
          $ref: "#/components/schemas/EmailType"
        status:
          $ref: "#/components/schemas/NotificationStatus"
        state:
          type: string
          default: ""
        title:
          type: string
          default: ""
        icon:
          type: string
          default: ""
        desc:
          type: string
          default: ""
        content:
          type: string
          default: ""
        time:
          type: integer
          format: int64
        refUrl:
          type: string
          default: ""
        iconType:
          type: string
          default: ""
        targetId:
          type: integer
          format: int32
          default: 0
        reviewedId:
          type: string
          default: ""
        notificationCount:
          type: integer
          format: int32
          default: 0
    NotificationResultList:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: "#/components/schemas/PublishMessage"
        icon:
          type: object
          additionalProperties:
            type: string
    DeviceInfo:
      type: object
      properties:
        deviceUUID:
          type: string
          default: ""
        deviceToken:
          type: string
          default: ""
        userId:
          type: string
          default: ""
        language:
          type: string
          default: zh-tw
    ParticipatedTopic:
      type: object
      properties:
        id:
          type: integer
          format: int32
          default: 0
        title:
          type: string
          default: ""
        content:
          type: string
          default: ""
        forumName:
          type: string
          default: ""
        lastModifiedUser:
          type: string
          default: ""
        lastModifiedTime:
          type: integer
          format: int64
          default: 0
        replyCount:
          type: integer
          format: int32
          default: 0
        refUrl:
          type: string
          default: ""
    StatisticActionResults:
      type: object
      required:
        - userId
        - actionId
        - actionCount
      properties:
        userId:
          type: string
          default: ""
        actionId:
          type: integer
          format: int32
          default: 0
        actionCount:
          type: integer
          format: int32
          default: 0 
    DeltaPointInfo:
      type: object
      required:
        - levelName
        - levelCount
      properties:
        levelName:
          type: string
        levelCount:
          type: number
          format: float
          default: 0
        details:
          type: array
          items:
            $ref: "#/components/schemas/DeltaPointDetailInfo"
    DeltaPointDetailInfo:
      type: object
      required:
        - actionName
        - actionCount
      properties:
        actionName:
          type: string
        actionCount:
          type: number
          format: float
          default: 0
    DeltaPointLineChart:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: "#/components/schemas/DeltaPointLineChartDetail"
        start:
          type: integer
          format: int32
          default: 1
    DeltaPointLineChartDetail:
      type: object
      properties:
        levelName:
          type: string
        points:
          type: array
          items:
            $ref: "#/components/schemas/LineChartPoint"
    LineChartPoint:
      type: object
      properties:
        x:
          type: integer
          format: int32
          default: 0
        y:
          type: integer
          format: int32
          default: 0
    ReplyData:
      type: object
      properties:
        replyId:
          type: integer
          format: int32
        index:
          type: integer
          format: int32
    AttachmentListDetail:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        fileExt:
          type: string
        icon:
          $ref: "#/components/schemas/FileIcon"
        author:
          type: array
          items:
            $ref: "#/components/schemas/User"
        modifiedTime:
          type: integer
          format: int64
          default: 0
        belongForum:
          $ref: "#/components/schemas/IdNameDto"
        belongTopic:
          $ref: "#/components/schemas/IdNameDto"
        refUrl:
          type: string
          default: ""
    AttachmentSearchResult:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: "#/components/schemas/AttachmentListDetail"
        numFound:
          type: integer
          format: int32
          default: 0
    Pin:
      type: object
      properties:
        pin:
          $ref: "#/components/schemas/PinEnum"
    Announcement:
      type: object
      properties:
        text:
          type: string
    HotForumSearchResult:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: "#/components/schemas/ForumListDetail"
        numFound:
          type: integer
          format: int32
    ActiveMemberBaseInfo:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        department:
          type: string
        ext:
          type: string
        imgAvatar:
          type: string
    ActiveMemberInfoDetail:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/ActiveMemberBaseInfo"
        replies:
          type: integer
          format: int32
        tend:
          type: integer
          format: int32
        rank:
          type: integer
          format: int32
    ActiveMemberListResult:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: "#/components/schemas/ActiveMemberInfoDetail"
        numFound:
          type: integer
          format: int32
    ActiveMemberInfo:
      type: object
      properties:
        id:
          type: string
        count:
          type: integer
          format: int32
        rank:
          type: integer
          format: int32
    BasicInfo:
      type: object
      properties:
        account:
          type: string
          default: ""
        displayName:
          type: string
          default: ""
        localName:
          type: string
          default: ""
        englishName:
          type: string
          default: ""
        department:
          type: string
          default: ""
        email:
          type: string
          default: ""
        bg:
          type: string
          default: ""
        bu:
          type: string
          default: ""
    OfficeInfo:
      type: object
      properties:
        office:
          type: string
          default: ""
        extension:
          type: string
          default: ""
    FollowInfo:
      type: object
      properties:
        isFollowed:
          type: boolean
          default: false
        followCount:
          type: integer
          format: int32
          default: 0
    ReviewInfo:
      type: object
      properties:
        reviewCount:
          type: integer
          format: int32
          default: 0
    GroupUser:
      type: object
      properties:
        uid:
          type: string
          default: ""
        banner:
          type: string
          default: ""
        avatar:
          type: string
          default: ""
        basicInfo:
          $ref: "#/components/schemas/BasicInfo"
        officeInfo:
          $ref: "#/components/schemas/OfficeInfo"
        followInfo:
          $ref: "#/components/schemas/FollowInfo"
        reviewInfo:
          $ref: "#/components/schemas/ReviewInfo"
        skill:
          type: string
          default: ""
        project:
          type: string
          default: ""
        onduty:
          type: boolean
          default: false
    ForumIdWithModifiedTime:
      type: object
      required:
        - forumId
        - modifiedTime
      properties:
        forumId:
          type: integer
          format: int32
        modifiedTime:
          type: integer
          format: int64
    ForumMoveData:
      type: object
      required:
        - communityId
        - forumModifiedTime
      properties:
        communityId:
          type: integer
          format: int32
        forumModifiedTime:
          type: integer
          format: int64
    OutlookQueryData:
      type: object
      properties:
        query:
          type: string
        communityId:
          type: integer
          format: int32
          default: 0
        forumId:
          type: integer
          format: int32
          default: 0
    OutlookQueryResult:
      type: object
      properties:
        match:
          type: array
          items:
            $ref: "#/components/schemas/User"
        unMatch:
          $ref: "#/components/schemas/OutlookQueryUnmatchedResult"
    OutlookQueryUnmatchedResult:
      type: object
      properties:
        delta:
          type: array
          items:
            $ref: "#/components/schemas/User"
        others:
          type: array
          items:
            type: string
    EmojiDetail:
      type: object
      properties:
        userId:
          type: string
          default: ""
        operationTime:
          type: integer
          format: int64
          default: 0
    EmojiResultUser:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/UserSession"
        operationTime:
          type: integer
          format: int64
    EmojiResult:
      type: object
      properties:
        numFound:
          type: integer
          format: int32
        result:
          type: array
          items:
            $ref: "#/components/schemas/EmojiResultUser"
    ClosedCommunityData:
      type: object
      required:
        - communityModifiedTime
      properties:
        communityModifiedTime:
          type: integer
          format: int64
    ReopenedCommunityData:
      type: object
      required:
        - communityModifiedTime
      properties:
        communityModifiedTime:
          type: integer
          format: int64
    IdName:
      type: object
      properties:
        id:
          type: string
          default: ""
        name:
          type: string
          default: ""
    Source:
      type: object
      properties:
        id:
          type: integer
          format: int32
          default: 0
        type:
          $ref: "#/components/schemas/SearchType"
        name:
          type: string
          default: ""
        refUrl:
          type: string
          default: ""
    SearchCommunityData:
      type: object
      properties:
        id:
          type: integer
          format: int32
          default: 0
        name:
          type: string
          default: ""
        desc:
          type: string
          default: ""
        avatar:
          type: string
          default: ""
        medalInfo:
          $ref: "#/components/schemas/CommunityMedalDto"
        refUrl:
          type: string
          default: ""
        category:
          $ref: "#/components/schemas/CommunityCategory"
        memberCount:
          type: integer
          format: int32
          default: 0
        lastModifiedUser:
          $ref: "#/components/schemas/IdName"
        lastModifiedTime:
          type: integer
          format: int64
          default: 0
    SearchForumData:
      type: object
      properties:
        id:
          type: integer
          format: int32
          default: 0
        name:
          type: string
          default: ""
        status:
          $ref: "#/components/schemas/ForumStatus"
        refUrl:
          type: string
          default: ""
        modifiedTime:
          type: integer
          format: int64
          default: 0
        lastModifiedUser:
          $ref: "#/components/schemas/IdName"
        lastModifiedTime:
          type: integer
          format: int64
          default: 0
        type:
          $ref: "#/components/schemas/ForumType"
        tag:
          type: array
          items:
            type: string
        source:
          type: array
          items:
            $ref: "#/components/schemas/Source"
        identity:
          $ref: "#/components/schemas/Identity"
        toppingOrder:
          type: integer
          format: int32
          default: 0
    SearchTopicData:
      type: object
      properties:
        id:
          type: integer
          format: int32
          default: 0
        name:
          type: string
          default: ""
        status:
          $ref: "#/components/schemas/TopicStatus"
        refUrl:
          type: string
          default: ""
        type:
          $ref: "#/components/schemas/TopicType"
        state:
          $ref: "#/components/schemas/TopicState"
        showState:
          type: boolean
          default: false
        situation:
          $ref: "#/components/schemas/TopicSituation"
        content:
          type: string
          default: ""
        createUser:
          $ref: "#/components/schemas/IdName"
        lastModifiedUser:
          $ref: "#/components/schemas/IdName"
        lastModifiedTime:
          type: integer
          format: int64
          default: 0
        createTime:
          type: integer
          format: int64
          default: 0
        source:
          type: array
          items:
            $ref: "#/components/schemas/Source"
        identity:
          $ref: "#/components/schemas/Identity"
        toppingOrder:
          type: integer
          format: int32
          default: 0
    SearchAttachmentData:
      type: object
      properties:
        id:
          type: string
          default: ""
        name:
          type: string
          default: ""
        refUrl:
          type: string
          default: ""
        fileExt:
          type: string
          default: ""
        content:
          type: string
          default: ""
        createUser:
          $ref: "#/components/schemas/IdName"
        createTime:
          type: integer
          format: int64
          default: 0
        lastModifiedUser:
          $ref: "#/components/schemas/IdName"
        lastModifiedTime:
          type: integer
          format: int64
          default: 0
        source:
          type: array
          items:
            $ref: "#/components/schemas/Source"
    CommunityResultDetail:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/SearchType"
        data:
          type: object
        read:
          type: boolean
          default: false
    CommunityResultList:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: "#/components/schemas/CommunityResultDetail"
        numFound:
          type: integer
          format: int32
          default: 0
    EerpTopicCreationData:
      allOf:
        - $ref: "#/components/schemas/EerpTopicData"
        - type: object
          required:
            - forumId
          properties:
            forumId:
              type: integer
              format: int32
            type:
              $ref: "#/components/schemas/TopicType"
    EerpTopicData:
      type: object
      required:
        - title
      properties:
        title:
          type: string
        tag:
          type: array
          items:
            type: string
        text:
          type: string
    EerpmErrorCodeDto:
      type: object
      required:
        - errorCode
        - errorDesc
      properties:
        errorCode:
          type: string
        errorDesc:
          type: string
    EerpmErrorCauseDto:
      type: object
      required:
        - causeCode
        - causeDesc
      properties:
        causeCode:
          type: string
        causeDesc:
          type: string
    EerpmErrorSolutionDto:
      type: object
      required:
        - solutionCode
        - originSolution
      properties:
        solutionCode:
          type: string
        originSolution:
          type: string
    EerpqCodeDto:
      type: object
      properties:
        count:
          type: integer
          format: int32
        data:
          type: array
          items:
            $ref: "#/components/schemas/KeyLabelDto"
    KeyLabelDto:
      type: object
      properties:
        key:
          type: string
          nullable: false
        label:
          type: string
    LabelValueDto:
      type: object
      properties:
        label:
          type: string
          nullable: false
        value:
          type: object
    MemberList:
      type: object
      required:
        - id
      properties:
        id:
          type: array
          items:
            type: string
    GroupMember:
      type: object
      properties:
        memberId:
          type: string
        memberName:
          type: string
    ReplyDetail:
      type: object
      properties:
        replyId:
          type: integer
          format: int32
          default: 0
        replyText:
          type: string
          default: ""
        replyConclusionText:
          type: string
          default: ""
        replyCreateUserId:
          type: string
          default: ""
        replyModifiedUserId:
          type: string
          default: ""
        replyCreateTime:
          type: integer
          format: int64
          default: 0
        followReplyId:
          type: integer
          format: int32
          default: 0
        replyIndex:
          type: integer
          format: int32
          default: 0
        nestedReplyList:
          type: array
          items:
            $ref: "#/components/schemas/ReplyDetail"
    DiaDto:
      type: object
      required:
        - ApplicationCategory
        - ProjectName
      properties:
        ApplicationCategory:
          type: string
        ProjectName:
          type: string
          minLength: 1
          maxLength: 255
        Leader:
          type: string
          minLength: 0
          maxLength: 255
        ContactWindow:
          type: string
          minLength: 0
          maxLength: 255
        TeamMember:
          type: string
        Attachment:
          type: string
        Action:
          type: string
        InstanceCode:
          type: string
        ProjectExecutiveSummar:
          type: string
    DiaMemberDto:
      type: object
      required:
        - NTAccount
      properties:
        NTAccount:
          type: string
    DiaAttachmentPathDto:
      type: object
      required:
        - FileId
      properties:
        FileId:
          type: string
    DiaResultDto:
      allOf:
        - $ref: "#/components/schemas/IdDto"
        - type: object
          properties:
            status:
              $ref: "#/components/schemas/GeneralStatus"
            message:
              $ref: "#/components/schemas/DiaErrorMessage"
    IdDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
          default: 0
    SupportTopicType:
      type: object
      required:
        - topicType
        - editable
        - defaultAppField
        - archiveConclusionAttachment
      properties:
        topicType:
          $ref: "#/components/schemas/TopicType"
        editable:
          type: boolean
        defaultAppField:
          type: array
          items:
            $ref: "#/components/schemas/LabelValueDto"
        archiveConclusionAttachment:
          type: boolean
    ConclusionAlertDetail:
      allOf:
        - $ref: "#/components/schemas/ConclusionAlertGroupDetail"
        - $ref: "#/components/schemas/ConclusionAlertRuleDetail"
        - $ref: "#/components/schemas/ConclusionAlertHighLevelRuleDetail"
        - type: object
          properties:
            ruleColumns:
              type: array
              items:
                $ref: "#/components/schemas/CellComponentDto"
            dropdown:
              type: object
              additionalProperties:
                type: array
                items:
                  $ref: "#/components/schemas/LabelValueDto"
              example:
                factory:
                  - label: DG2
                    value: 1
            rangeDay:
              type: object
              additionalProperties:
                $ref: "#/components/schemas/RangeDayDto"
              example:
                startDay:
                  isLimited: true
                  range:
                    - 0
                    - 30
    ConclusionAlertGroupDetail:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: "#/components/schemas/ConclusionAlertGroup"
        groupLastModifiedTime:
          type: integer
          format: int64
          default: 0
    ConclusionAlertGroup:
      type: object
      properties:
        key:
          type: string
          nullable: false
          default: ""
        label:
          type: string
          maxLength: 20
        members:
          type: array
          items:
            $ref: "#/components/schemas/ConclusionAlertMember"
    ConclusionAlertRuleDetail:
      type: object
      properties:
        rules:
          type: array
          items:
            $ref: "#/components/schemas/ConclusionAlertRule"
        ruleLastModifiedTime:
          type: integer
          format: int64
          default: 0
    ConclusionAlertHighLevelRuleDetail:
      type: object
      properties:
        highLevelRules:
          type: array
          items:
            $ref: "#/components/schemas/ConclusionAlertRule"
    ConclusionAlertRule:
      type: object
      properties:
        key:
          type: integer
          format: int32
          nullable: false
          default: 0
        startDay:
          type: integer
          format: int32
          minimum: 0
          maximum: 30
        endDay:
          type: integer
          format: int32
          minimum: -1
          maximum: 30
        members:
          type: array
          items:
            $ref: "#/components/schemas/ConclusionAlertMember"
        factory:
          $ref: "#/components/schemas/LabelValueDto"
    ConclusionAlertMember:
      type: object
      properties:
        key:
          type: string
        label:
          type: string
        type:
          $ref: "#/components/schemas/ConclusionAlertMemberType"
    CellComponentDto:
      type: object
      properties:
        cell:
          type: string
        component:
          type: string
    RangeDayDto:
      type: object
      properties:
        isLimited:
          type: boolean
        range:
          type: array
          items:
            type: integer
            format: int32
    UserAutocompleteQuery:
      type: object
      required:
        - q
        - limit
        - exclude
      properties:
        q:
          type: string
        limit:
          type: integer
          format: int32
        withAvatar:
          type: boolean
          default: false
        exclude:
          type: array
          items:
            type: string
    VideoMappingDto:
      allOf:
        - $ref: "#/components/schemas/VideoLanguageDto"
        - $ref: "#/components/schemas/VideoIdDto"
        - type: object
          properties:
            app:
              type: string
            ddfId:
              type: string
            ddfVersion:
              type: integer
              format: int32
              default: 1
    VideoLanguageDto:
      type: object
      properties:
        videoLanguage:
          type: string
          default: ""
    VideoIdDto:
      type: object
      properties:
        videoId:
          type: string
          default: ""
    UserQueryDto:
      type: object
      properties:
        uids:
          type: array
          items:
            type: string
        samAccounts:
          type: array
          items:
            type: string
        names:
          type: array
          items:
            type: string
        withAvatar:
          type: boolean
          default: false
    DashboardDateDto:
      type: object
      properties:
        start:
          type: integer
          format: int64
        end:
          type: integer
          format: int64
    EerpDashboardDto:
      type: object
      properties:
        type:
          type: string
        conclusionChart:
          type: array
          items:
            $ref: "#/components/schemas/ChartDto"
        errorLevelChart:
          type: array
          items:
            $ref: "#/components/schemas/ChartDto"
        factoryChart:
          type: array
          items:
            $ref: "#/components/schemas/ChartDto"
        forumChart:
          type: array
          items:
            $ref: "#/components/schemas/ChartDto"
        departmentChart:
          type: array
          items:
            $ref: "#/components/schemas/ChartDto"
        effectiveSolutionChart:
          type: array
          items:
            $ref: "#/components/schemas/ChartDto"
        effectiveSolutions:
          type: array
          items:
            $ref: "#/components/schemas/LabelValueDto"
    ChartDto:
      type: object
      properties:
        value:
          type: object
        label:
          type: string
        total:
          type: integer
          format: int64
        color:
          type: string
    EerpmDashboardTopicDto:
      type: object
      properties:
        table:
          $ref: "#/components/schemas/EerpmDashboardTopicTableDto"
        factoryChart:
          type: array
          items:
            $ref: "#/components/schemas/ConclusionChartDto"
        forumChart:
          type: array
          items:
            $ref: "#/components/schemas/ConclusionChartDto"
    EerpmDashboardTopicTableDto:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/EerpmDashboardTopicDataDto"
        columns:
          type: array
          items:
            $ref: "#/components/schemas/ColumnDto"
        total:
          type: integer
          format: int32
    EerpmDashboardTopicDataDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        factory:
          type: string
        forum:
          type: string
        topicTitle:
          type: string
        conclusion:
          type: string
    EerpmDashboardDeviceDto:
      type: object
      properties:
        table:
          $ref: "#/components/schemas/EerpmDashboardDeviceTableDto"
        deviceModelChart:
          type: array
          items:
            $ref: "#/components/schemas/ChartDto"
        errorLevelChart:
          type: array
          items:
            $ref: "#/components/schemas/ChartDto"
    EerpmDashboardDeviceTableDto:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/EerpmDashboardDeviceDataDto"
        columns:
          type: array
          items:
            $ref: "#/components/schemas/ColumnDto"
        total:
          type: integer
          format: int32
    EerpmDashboardDeviceDataDto:
      type: object
      properties:
        factory:
          type: string
        forum:
          type: string
        deviceModel:
          type: string
        worstDevices:
          type: array
          items:
            type: string
        errorCode:
          type: string
        errorCount:
          type: integer
          format: int64
        errorLevel:
          type: string
    ColumnDto:
      type: object
      properties:
        value:
          type: string
        filters:
          type: array
          items:
            $ref: "#/components/schemas/LabelValueDto"
    ConclusionChartDto:
      type: object
      properties:
        label:
          type: string
        total:
          type: integer
          format: int64
        data:
          type: array
          items:
            $ref: "#/components/schemas/ChartDto"
    EerpDashboardFilterDto:
      type: object
      additionalProperties:
        type: array
        items:
          type: object
    ExtraRecipient:
      type: object
      properties:
        orgMembers:
          type: array
          items:
            $ref: "#/components/schemas/SimpleGroupWithUsers"
        bgbus:
          type: array
          items:
            $ref: "#/components/schemas/SimpleGroupWithUsers"
    AwardDto:
      type: object
      properties:
        contestName:
          type: string
        title:
          type: string
        contestProposal:
          type: string
        teamName:
          type: string
        link:
          type: string
    MedalDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        title:
          type: string
        medal:
          type: string
        expireTime:
          type: integer
          format: int64
        disabled:
          type: boolean
    CommunityMedalDto:
      type: object
      properties:
        certificates:
          type: array
          items:
            type: string
        medalId:
          type: integer
          format: int32
          default: 0
        medal:
          type: string
          default: ""
        title:
          type: string
          default: ""
    EerppDashboardTopicDto:
      type: object
      properties:
        table:
          $ref: "#/components/schemas/EerppDashboardTopicTableDto"
        factoryChart:
          type: array
          items:
            $ref: "#/components/schemas/ConclusionChartDto"
        forumChart:
          type: array
          items:
            $ref: "#/components/schemas/ConclusionChartDto"
        departmentChart:
          type: array
          items:
            $ref: "#/components/schemas/ConclusionChartDto"
    EerppDashboardTopicTableDto:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/EerppDashboardTopicDataDto"
        columns:
          type: array
          items:
            $ref: "#/components/schemas/ColumnDto"
        total:
          type: integer
          format: int32
    EerppDashboardTopicDataDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        factory:
          type: string
        department:
          type: string
        forum:
          type: string
        area:
          type: string
        lossCode:
          type: string
        lossDescription:
          type: string
        duration:
          type: integer
          format: int64
        conclusion:
          type: string
    EerppDashboardDeviceDto:
      type: object
      properties:
        table:
          $ref: "#/components/schemas/EerppDashboardDeviceTableDto"
        departmentChart:
          type: array
          items:
            $ref: "#/components/schemas/ChartDto"
        lossDescChart:
          type: array
          items:
            $ref: "#/components/schemas/ChartDto"
        errorLevelChart:
          type: array
          items:
            $ref: "#/components/schemas/ChartDto"
    EerppDashboardDeviceTableDto:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/EerppDashboardDeviceDataDto"
        columns:
          type: array
          items:
            $ref: "#/components/schemas/ColumnDto"
        total:
          type: integer
          format: int32
    EerppDashboardDeviceDataDto:
      type: object
      properties:
        factory:
          type: string
        department:
          type: string
        forum:
          type: string
        lines:
          type: array
          items:
            type: string
        areas:
          type: array
          items:
            type: string
        lossCode:
          type: string
        lossDescriptions:
          type: array
          items:
            type: string
        duration:
          type: integer
          format: int64
        errorLevel:
          type: string
    TopicIdentifier:
      type: object
      properties:
        communityId:
          type: integer
        topicId:
          type: integer
    SyncResult:
      type: object
      properties:
        successCount:
          type: integer
        failureCount:
          type: integer
        failures:
          type: array
          items:
            $ref: '#/components/schemas/TopicIdentifier'
################################################################################
#                                 API Paths                                    #
################################################################################
paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: User login
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthenticationToken"
        description: Username and Password
        required: true
      parameters:
        - name: Source-OS
          in: header
          required: false
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSession"
        400:
          description: Invalid parameters
        401:
          description: Login failed
          content:
            application/json:
              schema:
                type: string
                example:
                  message: login failed
  /auth/logout:
    post:
      tags:
        - Auth
      summary: User logout
      operationId: logout
      parameters:
        - name: token
          in: query
          description: Device token
          required: false
          schema:
            type: string
            default: ""
      responses:
        200:
          description: OK
        400:
          description: Invalid parameters
  /auth/checkLogin:
    get:
      tags:
        - Auth
      summary: Check login status
      operationId: checkLogin
      parameters:
        - name: refresh
          in: query
          description: Refresh
          required: true
          schema:
            type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSession"
        400:
          description: Invalid parameters
        401:
          description: Not login
  /auth/deviceToken:
    post:
      tags:
        - Auth
      summary: Register ios device token
      operationId: registerDeviceToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeviceInfo"
        description: Device token
        required: true
      responses:
        200:
          description: OK
        400:
          description: Invalid parameters
  /auth/appInfo:
    get:
      tags:
        - Auth
      summary: Get appInfo (isSystemAdmin)
      operationId: appInfo
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppInfo"
        401:
          description: Get appInfo (isSystemAdmin) failed
  /community/listsearch:
    get:
      tags:
        - Community
      summary: List the search result
      operationId: listSearch
      parameters:
        - $ref: "#/components/parameters/CommunityCategoryParam"
        - $ref: "#/components/parameters/SearchScopeParam"
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
        - $ref: "#/components/parameters/CommunitySortParam"
        - $ref: "#/components/parameters/UserIdParam"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunitySearchResult"
        400:
          description: Invalid parameters
  /community/categorysearch:
    get:
      tags:
        - Community
      summary: List the community category
      operationId: categorySearch
      parameters:
        - $ref: "#/components/parameters/SearchScopeParam"
        - $ref: "#/components/parameters/ExcludeCommunityStatusParam"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
                example:
                  all: 50
                  projectCommunity: 10
                  departmentCommunity: 15
                  generalCommunity: 25
        400:
          description: Invalid parameters
  /community/{communityId}/members/tableView:
    get:
      tags:
        - Community
      summary: Get members of community with table view
      operationId: getMembersTableViewOfCommunity
      parameters:
        - name: communityId
          in: path
          description: Id of the community
          required: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Offset
          required: true
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: Offset
          required: true
          schema:
            type: integer
            format: int32
        - $ref: "#/components/parameters/MemberSortParam"
          required: true
          schema:
            type: string
        - name: q
          in: query
          description: query name
          required: false
          schema:
            type: string
            default: ""
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MembersTableViewResult"
        400:
          description: Invalid parameters
  /community/{communityId}/members:
    get:
      tags:
        - Community
      summary: Get the member list of the community
      operationId: getMemberListOfCommunity
      parameters:
        - name: communityId
          in: path
          description: Id of the community
          required: true
          schema:
            type: integer
            format: int32
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
        - $ref: "#/components/parameters/MemberSortParam"
          required: true
          schema:
            type: string
        - name: memberType
          in: query
          description: default/empty = all, otherwise admin or member
          schema:
            $ref: "#/components/schemas/MemberType"
        - name: q
          in: query
          description: query name
          required: false
          schema:
            type: string
            default: ""
        - name: isImgAvatar
          in: query
          description: 
            isimgAvatar
              * true - Get avatar.
              * false - Don't get avatar.
          required: false
          schema:
            type: boolean
            default: true
        - name: userId
          in: query
          description: user id
          required: false
          schema:
            type: string
            default: ""
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MemberListResult"
        400:
          description: Invalid parameters
    post:
      tags:
        - Community
      summary: Add members into the community
      operationId: addMembersIntoCommunity
      requestBody:
        $ref: "#/components/requestBodies/MemberList"
      parameters:
        - name: communityId
          in: path
          description: Id of the community
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
                example:
                  message: You have become a member of the community.
        400:
          description: Invalid parameters
  /community/{communityId}/members/{memberId}:
    post:
      tags:
        - Community
      summary: Add a member into the community
      operationId: addMemberIntoCommunity
      parameters:
        - name: communityId
          in: path
          description: Id of the community
          required: true
          schema:
            type: integer
            format: int32
        - name: memberId
          in: path
          description: Id of the member
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
                example:
                  message: You have become a member of the community.
        400:
          description: Invalid parameters
    delete:
      tags:
        - Community
      summary: Delete a member from the community
      operationId: deleteMemberFromCommunity
      parameters:
        - name: communityId
          in: path
          description: Id of the community
          required: true
          schema:
            type: integer
            format: int32
        - name: memberId
          in: path
          description: Id of the member
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
                example:
                  message: You have left the community.
        400:
          description: Invalid parameters
  /community/{communityId}/members/application:
    get:
      tags:
        - Community
      summary: Get the list of members need to be approved
      operationId: getApprovalMemberList
      parameters:
        - name: communityId
          in: path
          description: Id of the community
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApplicantDetail"
    post:
      tags:
        - Community
      summary: Add the application of joining community.
      operationId: addMemberApplicationOfCommunity
      parameters:
        - name: communityId
          in: path
          description: Id of the community
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        $ref: "#/components/requestBodies/ApplicationDetail"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
                example:
                  message: Your application is sent. Please wait for the approval.
        400:
          description: Invalid parameters
  /community/{communityId}/members/notification:
    post:
      tags:
        - Community
      summary: Notify the members in the community.
      operationId: notifyMemberOfCommunity
      parameters:
        - name: communityId
          in: path
          description: Id of the community
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        $ref: "#/components/requestBodies/NotificationDetail"
      responses:
        200:
          description: OK
        400:
          description: Invalid parameters
  /community/{communityId}/members/application/{applicantId}:
    patch:
      tags:
        - Community
      summary: Review the application of joining community.
      operationId: reviewMemberApplicationOfCommunity
      parameters:
        - name: communityId
          in: path
          description: Id of the community
          required: true
          schema:
            type: integer
            format: int32
        - name: applicantId
          in: path
          description: Id of the member
          required: true
          schema:
            type: string
        - name: action
          in: query
          description: 
            Review action
              * approved - Approve
              * rejcted - Reject
          required: true
          schema:
            type: string
            enum:
              - approved
              - auto-approved
              - rejected
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
                example:
                  message: The application is approved/ rejected.
        400:
          description: Invalid parameters
  /users/from-outlook:
    post:
      tags:
        - User
      summary: Search for the users from outlook by email
      operationId: searchOutlookUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OutlookQueryData"
        description: Outlook query data
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OutlookQueryResult"
        400:
          description: Invalid parameters
  /users/to-outlook:
    post:
      tags:
        - User
      summary: transfer to outlook recipient format
      operationId: transferToOutlookUser
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        description: uid list
        required: true
      responses:
        200:
          description: OK
          content:
            "*/*":
              schema:
                type: string
        400:
          description: Invalid parameters
  /users:
    get:
      tags:
        - User
      summary: Search for the users by their name
      operationId: searchUserByName
      parameters:
        - name: q
          in: query
          description: query name
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/LimitParam"
        - name: exclude
          in: query
          description: Exclusion
          required: false
          schema:
            type: array
            items:
              type: string
        - name: withAvatar
          in: query
          description: Whether there is avatar in the response
          required: true
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AutoCompleteUser"
        400:
          description: Invalid parameters
    post:
      tags:
        - User
      summary: Search for the users by their name
      operationId: getAutocompleteUserList
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserAutocompleteQuery"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AutoCompleteUser"
        400:
          description: Invalid parameters
  /users/info:
    post:
      tags:
        - User
      summary: Search for the users by uid or samAccount
      operationId: getUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserQueryDto"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserSession"
        400:
          description: Invalid parameters
  /community:
    post:
      tags:
        - Community
      summary: to create community
      description: Used to create community information
      operationId: createCommunity
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatedCommunityData"
        description: 
          name is the community title
          * desc is the description
          * type describes public or private
          * status describes open or delete
          * admins describe all administrators
          * members describe all members
          * category describes project, department or common
          * notification type describles all, custom
        required: true
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: integer
                format: int32
        202:
          description: Accepted
        400:
          description: Bad Request
        404:
          description: Create Community Error
  /community/{communityId}:
    get:
      tags:
        - Community
      summary: to get community information
      description: Used to get community information by communityId
      operationId: getCommunityInfo
      parameters:
        - name: communityId
          in: path
          description: Id of the community
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunityHomePage"
        400:
          description: Invalid parameters
    put:
      tags:
        - Community
      summary: to update community information
      description: Used to update community information
      operationId: updateCommunity
      parameters:
        - name: communityId
          in: path
          description: Id of the community
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatedCommunityData"
        description: 
          name is the community title
          * desc is the description
          * type describes public or private
          * status describes open or delete
          * admins describe all administrators
          * members describe all members
          * category describes project, department or common
          * communityModifiedTime describes current the moditied time
          * notification type describles all, custom
        required: true
      responses:
        201:
          description: Success
        400:
          description: Bad Request
        404:
          description: update Community Error
        409:
          description: Conflict
  /community/application/delete:
    get:
      tags:
        - Community
      summary: Getting the application of deleting the community
      description: Getting the application of deleting the community
      operationId: getApplicationOfDeletingCommunity
      parameters:
        - name: processed
          in: query
          description: Processed or not
          required: true
          schema:
            type: boolean
            default: false
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteApplicationResult"
        400:
          description: Bad Request
  /community/application/delete/{communityId}:
    post:
      tags:
        - Community
      summary: Sending the application of deleting the community
      description: Send the application of deleting the community
      operationId: applyDeletingCommunity
      parameters:
        - name: communityId
          in: path
          description: Id of the community
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationDetail"
        description: subject and description
        required: true
      responses:
        200:
          description: Success
        400:
          description: Bad Request
    patch:
      tags:
        - Community
      summary: Review the application of deleting the community
      description: Review the application of deleting the community
      operationId: reviewDeletingApplicationOfCommunity
      parameters:
        - name: communityId
          in: path
          description: Id of the community
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApprovalStatus"
        description: status and rejectedMessage
        required: true
      responses:
        200:
          description: Success
        400:
          description: Invalid parameters
        401:
          description: Not authorized
  /community/review:
    get:
      tags:
        - Community
      summary: get all review Creation data
      description: to get all review creation data
      operationId: getAllCommunityCreation
      parameters:
        - name: processed
          in: query
          description: Processed or not
          required: true
          schema:
            type: boolean
            default: false
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunityReviewList"
        404:
          description: Review Community Error
  /community/review/{batchId}:
    patch:
      tags:
        - Community
      summary: review Creation data
      description: to review Creation data and transfer data to communities and
        community_role table
      operationId: reviewCommunityCreation
      parameters:
        - name: batchId
          in: path
          description: it used to search data
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApprovalStatus"
        description: 
          status for approved, auto-approved, rejected
          * rejectedMessage record rejected reason
        required: true
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: integer
                format: int32
        404:
          description: Review Community Error
  /community/{communityId}/banner:
    patch:
      tags:
        - Community
      summary: update Community banner img
      description: update banner of community
      operationId: updateCommunityBanner
      parameters:
        - name: communityId
          in: path
          description: it used to search data
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Image"
        description: Updated banner Img
        required: true
      responses:
        201:
          description: Success
        400:
          description: Bad Request
        404:
          description: update Community banner img Error
    get:
      tags:
        - Community
      summary: get Community banner img
      description: get Community banner img by communityId
      operationId: getCommunityBanner
      parameters:
        - name: communityId
          in: path
          description: it used to search data
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
        404:
          description: get Community banner img Error
  /community/{communityId}/avatar/medal:
    get:
      tags:
        - Community
      summary: get Community avatar meadl info
      description: get Community avatar medal info by communityId
      operationId: getCommunityAvatarMedal
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunityMedalDto"
        400:
          description: Bad Request
        404:
          description: get Community avatar medal info Error
  /community/{communityId}/avatar:
    patch:
      tags:
        - Community
      summary: update Community avatar img
      description: update avatar of community
      operationId: updateCommunityAvatar
      parameters:
        - name: communityId
          in: path
          description: it used to search data
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AvatarImage"
        description: Updated avatar Img
        required: true
      responses:
        201:
          description: Success
        404:
          description: update Community avatar img Error
    get:
      tags:
        - Community
      summary: get Community avatar img
      description: get Community avatar img by communityId
      operationId: getCommunityAvatar
      parameters:
        - name: communityId
          in: path
          description: it used to search data
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
        400:
          description: Bad Request
        404:
          description: get Community avatar img Error
  /community/{communityId}/forums:
    get:
      tags:
        - Community
      summary: List the forums in the community
      operationId: searchForumList
      parameters:
        - name: communityId
          in: path
          description: Id of the community
          required: true
          schema:
            type: integer
            format: int32
        - name: forumType
          in: query
          description: Forum type
          required: true
          schema:
            type: array
            items:
              type: string
              enum:
                - public
                - private
                - system
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
        - $ref: "#/components/parameters/ForumSortParam"
        - name: withTopping
          in: query
          description: with topping result
          required: true
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForumSearchResult"
        400:
          description: Invalid parameters
  /community/{communityId}/topics:
    get:
      tags:
        - Community
      summary: List the topics in the community
      operationId: searchTopicList
      parameters:
        - name: communityId
          in: path
          description: Id of the community
          required: true
          schema:
            type: integer
            format: int32
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
        - $ref: "#/components/parameters/TopicSortParam"
        - name: state
          in: query
          description: 
            unconcluded * concluded 
          required: false
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TopicSearchResult"
        400:
          description: Invalid parameters
  /community/{communityId}/role/{memberId}:
    put:
      tags:
        - Community
      summary: update a member Role
      operationId: updatMemberRoleOfCommunity
      parameters:
        - name: communityId
          in: path
          description: Id of the community
          required: true
          schema:
            type: integer
            format: int32
        - name: memberId
          in: path
          description: Id of the member
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Role"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
                example:
                  message: You have become a member of the community.
        400:
          description: Invalid parameters
  /forum/{forumId}/members:
    get:
      tags:
        - Forum
      summary: Get the members who is in or not in the forum
      operationId: getMemberListOfForum
      parameters:
        - name: forumId
          in: path
          description: Id of the forum
          required: true
          schema:
            type: integer
            format: int32
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
        - $ref: "#/components/parameters/MemberSortParam"
        - $ref: "#/components/parameters/UserIdParam"
        - name: memberInForum
          in: query
          description: >
            memberInForum:
              * true - Get the members in the forum.
              * false - Get the members in the community who are not in this forum.
          required: true
          schema:
            type: boolean
            default: true
        - name: q
          in: query
          description: query name
          required: false
          schema:
            type: string
            default: ""
        - name: isImgAvatar
          in: query
          description: 
            isimgAvatar
              * true - Get avatar.
              * false - Don't get avatar.
          required: false
          schema:
            type: boolean
            default: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MemberListResult"
        400:
          description: Invalid parameters
    post:
      tags:
        - Forum
      summary: Add members into the forum
      operationId: addMembersIntoForum
      requestBody:
        $ref: "#/components/requestBodies/MemberList"
      parameters:
        - name: forumId
          in: path
          description: Id of the forum
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
        400:
          description: Invalid parameters
  /forum/{forumId}/members/application:
    get:
      tags:
        - Forum
      summary: Get the list of members need to be approved
      operationId: getReviewedMemberListOfForum
      parameters:
        - name: forumId
          in: path
          description: Id of the forum
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApplicantDetail"
    post:
      tags:
        - Forum
      summary: Add the application of joining the forum.
      operationId: addMemberApplicationOfForum
      parameters:
        - name: forumId
          in: path
          description: Id of the forum
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        $ref: "#/components/requestBodies/ApplicationDetail"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
                example:
                  message: Your application is sent. Please wait for the approval.
        400:
          description: Invalid parameters
  /forum/{forumId}/members/application/{applicantId}:
    patch:
      tags:
        - Forum
      summary: Review the application of joining the forum.
      operationId: reviewMemberApplicationOfForum
      parameters:
        - name: forumId
          in: path
          description: Id of the forum
          required: true
          schema:
            type: integer
            format: int32
        - name: applicantId
          in: path
          description: Id of the member
          required: true
          schema:
            type: string
        - name: action
          in: query
          description: 
            Review action
              * approved - Approve
              * rejcted - Reject
          required: true
          schema:
            type: string
            enum: *ReviewAction
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
                example:
                  message: The application is approved/ rejected.
        400:
          description: Invalid parameters
  /forum/{forumId}/members/notification:
    post:
      tags:
        - Forum
      summary: Notify the members in the forum.
      operationId: notifyMemberOfForum
      parameters:
        - name: forumId
          in: path
          description: Id of the forum
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        $ref: "#/components/requestBodies/NotificationDetail"
      responses:
        200:
          description: OK
        400:
          description: Invalid parameters
  /forum/{forumId}/members/{memberId}:
    post:
      tags:
        - Forum
      summary: Add a member into the forum
      operationId: addMemberIntoForum
      parameters:
        - name: forumId
          in: path
          description: Id of the forum
          required: true
          schema:
            type: integer
            format: int32
        - name: memberId
          in: path
          description: Id of the member
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
        400:
          description: Invalid parameters
    delete:
      tags:
        - Forum
      summary: Delete a member from the forum
      operationId: deleteMemberFromForum
      parameters:
        - name: forumId
          in: path
          description: Id of the forum
          required: true
          schema:
            type: integer
            format: int32
        - name: memberId
          in: path
          description: Id of the member
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
                example:
                  message: You have left the forum.
        400:
          description: Invalid parameters
  /forum/{forumId}/role/{memberId}:
    put:
      tags:
        - Forum
      summary: Update member's role in the forum
      operationId: updatMemberRoleOfForum
      parameters:
        - name: forumId
          in: path
          description: Id of the community
          required: true
          schema:
            type: integer
            format: int32
        - name: memberId
          in: path
          description: Id of the member
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Role"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid parameters
  /forum/{forumId}:
    get:
      tags:
        - Forum
      summary: Get the forum information
      operationId: getForumInfo
      parameters:
        - name: forumId
          in: path
          description: Id of the forum
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForumHomePage"
        400:
          description: Invalid parameters
    put:
      tags:
        - Forum
      summary: to update forum information
      description: Used to update forum information
      operationId: updateForum
      parameters:
        - name: forumId
          in: path
          description: Id of the forum
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatedForumData"
        description: 
          communityId is the Community id
          * name is the forum title
          * tag is the tag
          * type describes public or private
          * status describes open or delete
          * admins describe all administrators
          * members describe all members
          * forumModifiedTime describes current the forum moditied time
        required: true
      responses:
        201:
          description: Success
        400:
          description: Bad Request
        404:
          description: update Forum Error
        409:
          description: Conflict
    delete:
      tags:
        - Forum
      summary: to delete forum information
      operationId: deleteForum
      parameters:
        - name: forumId
          in: path
          description: Id of the forum
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForumStatusInput"
        description: delete status
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
                example:
                  message: You have deleted the forum.
        400:
          description: Invalid parameters
  /forum/{forumId}/move:
    patch:
      tags:
        - Forum
      summary: Move forum to another community
      operationId: moveForumToAnotherCommunity
      parameters:
        - name: forumId
          in: path
          description: Id of the forum
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForumMoveData"
        required: true
      responses:
        200:
          description: Success
        400:
          description: Invalid parameters
        409:
          description: Conflict
  /forum/{forumId}/topics:
    get:
      tags:
        - Forum
      summary: List the topics in the forum
      operationId: searchTopicListOfForum
      parameters:
        - name: forumId
          in: path
          description: Id of the forum
          required: true
          schema:
            type: integer
            format: int32
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
        - $ref: "#/components/parameters/TopicSortParam"
        - name: withTopping
          in: query
          description: with topping result
          required: true
          schema:
            type: boolean
            default: false
        - name: state
          in: query
          description: 
           unconcluded * concluded 
          required: false
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TopicSearchResult"
        400:
          description: Invalid parameters
  /forum:
    post:
      tags:
        - Forum
      summary: to create forum
      description: Used to create forum information
      operationId: createForum
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForumData"
        description: 
          communityId is the Community id
          * name is the forum title
          * tag is the tag
          * type describes public or private
          * status describes open or delete
          * admins describe all administrators
          * members describe all members
        required: true
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: integer
                format: int32
        202:
          description: Accepted
        400:
          description: Bad Request
        404:
          description: Create Forum Error
  /topic:
    post:
      tags:
        - Topic
      summary: Create a topic
      description: Create a topic in the forum
      operationId: createTopic
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TopicCreationData"
        required: true
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: integer
                format: int32
        400:
          description: Invalid parameters
        404:
          description: Create Forum Error
        413:
          description: File size exceeded
  /topic/issueTracking:
    post:
      tags:
        - Topic
      summary: Create issue tracking topic
      description: Create issue tracking topic
      operationId: createIssueTrackingTopic
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TopicCreationData"
        required: true
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: integer
                format: int32
        400:
          description: Invalid parameters
        404:
          description: Create Forum Error
        413:
          description: File size exceeded
  /topic/{topicId}:
    get:
      tags:
        - Topic
      summary: Get the topic information
      operationId: getTopicInfo
      parameters:
        - name: topicId
          in: path
          description: Id of the topic
          required: true
          schema:
            type: integer
            format: int32
        - name: withAttachmentDetail
          in: query
          description: Need attachment detail or not
          required: false
          schema:
            type: boolean
            default: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TopicHomePage"
        400:
          description: Invalid parameters
    put:
      tags:
        - Topic
      summary: Update the topic information
      operationId: updateTopicInfo
      parameters:
        - name: topicId
          in: path
          description: Id of the topic
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TopicUpdatedData"
        required: true
      responses:
        200:
          description: Success
        400:
          description: Invalid parameters
        404:
          description: Update failed
        409:
          description: Conflict
        413:
          description: File size exceeded
    delete:
      tags:
        - Topic
      summary: Delete the topic
      operationId: deleteTopic
      parameters:
        - name: topicId
          in: path
          description: Id of the topic
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
        400:
          description: Invalid parameters
    patch:
      tags:
        - Topic
      summary: Update the topic to other forum with permission
      operationId: moveTopicToOtherForum
      parameters:
        - name: topicId
          in: path
          description: Id of the topic
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForumIdWithModifiedTime"
        required: true
      responses:
        200:
          description: Success
        400:
          description: Invalid parameters
        404:
          description: Update failed
        409:
          description: Conflict
  /topic/{topicId}/emoji:
    get:
      tags:
        - Topic
      summary: Get the emoji to the topic
      operationId: getTopicEmoji
      parameters:
        - name: topicId
          in: path
          description: Id of the topic
          required: true
          schema:
            type: integer
            format: int32
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
        - name: sort
          in: query
          description: 
            Sort
              * -operationTime - Sort by operation time. Descending.
              * +operationTime - Sort by operation time. Ascending.
          required: true
          schema:
            type: string
            default: -operationTime
        - name: emoji
          in: query
          required: true
          schema:
            type: string
            enum:
              - surprised
              - laugh
              - agree
              - wink
              - like
              - cry
            default: like
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmojiResult"
        400:
          description: Invalid parameters
    put:
      tags:
        - Topic
      summary: Set the emoji to the topic
      operationId: setEmoji
      parameters:
        - name: topicId
          in: path
          description: Id of the topic
          required: true
          schema:
            type: integer
            format: int32
        - name: emoji
          in: query
          description: 
            Emoji
              * surprised
              * laugh
              * agree
              * wink
              * like
              * cry
          required: true
          schema:
            type: string
            enum: *Emoji
      responses:
        200:
          description: OK
        400:
          description: Invalid parameters
    delete:
      tags:
        - Topic
      summary: Remove the emoji to the topic
      operationId: removeEmoji
      parameters:
        - name: topicId
          in: path
          description: Id of the topic
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
        400:
          description: Invalid parameters
  /topic/{topicId}/bookmark:
    put:
      tags:
        - Topic
      summary: Set the bookmark to the topic
      operationId: setBookmarkOfTopic
      parameters:
        - name: topicId
          in: path
          description: Id of the topic
          required: true
          schema:
            type: integer
            format: int32
        - name: forumId
          in: query
          description: forumId
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
        400:
          description: Invalid parameters
    delete:
      tags:
        - Topic
      summary: Remove the bookmark to the topic
      operationId: removeBookmarkOfTopic
      parameters:
        - name: topicId
          in: path
          description: Id of the topic
          required: true
          schema:
            type: integer
            format: int32
        - name: forumId
          in: query
          description: forumId
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
        400:
          description: Invalid parameters
  /topic/{topicId}/seal:
    put:
      tags:
        - Topic
      summary: Seal the topic
      operationId: sealTopic
      parameters:
        - name: topicId
          in: path
          description: Id of the topic
          required: true
          schema:
            type: integer
            format: int32
        - name: seal
          in: query
          description: forumId
          required: true
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: OK
        400:
          description: Invalid parameters
  /topic/{account}/pqm:
    post:
      tags:
        - Topic
      summary: Create a pqm topic
      description: Create a pqm topic in the forum
      operationId: createTopicOfPqm
      parameters:
        - name: account
          in: path
          description: Id of the topic
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TopicPqmData"
        required: true
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: integer
                format: int32
        400:
          description: Invalid parameters
        404:
          description: Create pqm Error
  /topic/{topicId}/replies:
    get:
      tags:
        - Topic
      summary: List the replies of the topic
      operationId: searchReplyListOfTopic
      parameters:
        - name: topicId
          in: path
          description: Id of the topic
          required: true
          schema:
            type: integer
            format: int32
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
        - name: sort
          in: query
          description: 
            Sort
              * -createTime - Sort by create time. Descending.
              * +createTime - Sort by create time. Ascending.
          required: true
          schema:
            type: string
        - name: withAttachmentDetail
          in: query
          description: Need attachment detail or not
          required: false
          schema:
            type: boolean
            default: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplySearchResult"
        400:
          description: Invalid parameters
    post:
      tags:
        - Topic
      summary: Create a reply
      description: Create a reply in the topic of reply
      operationId: createReply
      parameters:
        - name: topicId
          in: path
          description: Id of the topic
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReplyCreationData"
        required: true
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplyData"
        400:
          description: Invalid parameters
        404:
          description: Create Forum Error
        413:
          description: File size exceeded
  /topic/reply/{replyId}/replies:
    get:
      tags:
        - Topic
      summary: List the replies of the reply
      operationId: searchReplyListOfReply
      parameters:
        - name: replyId
          in: path
          description: Id of the reply
          required: true
          schema:
            type: integer
            format: int32
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
        - name: sort
          in: query
          description: 
            Sort
              * -createTime - Sort by create time. Descending.
              * +createTime - Sort by create time. Ascending.
          required: true
          schema:
            type: string
        - name: withAttachmentDetail
          in: query
          description: Need attachment detail or not
          required: false
          schema:
            type: boolean
            default: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplySearchResult"
        400:
          description: Invalid parameters
  /tag:
    get:
      tags:
        - Tag
      summary: get tags
      operationId: getTags
      parameters:
        - name: q
          in: query
          description: query name
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/LimitParam"
        - name: exclude
          in: query
          description: Exclusion
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"
        400:
          description: Invalid parameters
  /file:
    post:
      tags:
        - File
      summary: Upload files
      operationId: uploadFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  description: file to upload
                  type: string
                  format: binary
                fileName:
                  type: string
                videoId:
                  type: string
                videoLanguage:
                  type: string
                videoSize:
                  type: integer
                  format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid parameters
        413:
          description: File size exceeded
  /file/{fileId}:
    delete:
      tags:
        - File
      summary: Delete the file
      operationId: deleteFile
      parameters:
        - name: fileId
          in: path
          description: Id of the file
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
        400:
          description: Invalid parameters
  /file/{fileId}/preview:
    get:
      tags:
        - File
      summary: Preview the file
      operationId: previewFile
      parameters:
        - name: fileId
          in: path
          description: Id of the file
          required: true
          schema:
            type: string
        - name: startPage
          in: query
          description: Start page number
          required: true
          schema:
            type: integer
            format: int32
        - name: endPage
          in: query
          description: End page number
          required: true
          schema:
            type: integer
            format: int32
        - name: withMetaData
          in: query
          description: With metadata
          required: true
          schema:
            type: boolean
        - name: fromJarvis
          in: query
          description: Whether request is from Jarvis
          required: false
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreviewData"
        206:
          description: File preview not supported
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreviewData"
        400:
          description: Invalid parameters
  /file/{fileId}/download/check:
    get:
      tags:
        - File
      summary: Check the permission of downloading
      operationId: checkDownloadPermission
      parameters:
        - name: fileId
          in: path
          description: Id of the file
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        400:
          description: Invalid parameters
        401:
          description: Unauthorized
  /file/{fileId}/detail:
    get:
      tags:
        - File
      summary: Get the file detail
      operationId: getFileDetail
      parameters:
        - name: fileId
          in: path
          description: Id of the file
          required: true
          schema:
            type: string
        - name: deviceType
          in: query
          description: identify request from web or mobile
          required: true
          schema:
            type: string
            enum:
              - web
              - mobile
            default: web
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attachment"
        400:
          description: Invalid parameters
  /file/{fileId}/download:
    get:
      tags:
        - File
      summary: Download the file
      operationId: downloadFile
      parameters:
        - name: fileId
          in: path
          description: Id of the file
          required: true
          schema:
            type: string
        - name: fromJarvis
          in: query
          description: Whether request is from Jarvis
          required: false
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: OK
        400:
          description: Invalid parameters
  /file/{fileId}/downloadPDF:
    get:
      tags:
        - File
      summary: Download the pdf file
      operationId: downloadPDFFile
      parameters:
        - name: fileId
          in: path
          description: Id of the file
          required: true
          schema:
            type: string
        - name: fromJarvis
          in: query
          description: Whether request is from Jarvis
          required: false
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: OK
        400:
          description: Invalid parameters
  /file/{fileId}/checkConversionStatus:
    get:
      tags:
        - File
      summary: Check the file conversion status
      operationId: checkConversionStatus
      parameters:
        - name: fileId
          in: path
          description: Id of the file
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileConversionStatus"
        400:
          description: Invalid parameters
  /topic/reply/{replyId}:
    get:
      tags:
        - Topic
      summary: Get the reply information
      operationId: getReplyInfo
      parameters:
        - name: replyId
          in: path
          description: Id of the reply
          required: true
          schema:
            type: integer
            format: int32
        - name: withAttachmentDetail
          in: query
          description: Need attachment detail or not
          required: false
          schema:
            type: boolean
            default: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplyListDetail"
        400:
          description: Invalid parameters
    put:
      tags:
        - Topic
      summary: Update the reply
      operationId: updateReply
      parameters:
        - name: replyId
          in: path
          description: Id of the reply
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReplyUpdatedData"
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplyListDetail"
        400:
          description: Invalid parameters
        404:
          description: Update failed
        409:
          description: Conflict
        413:
          description: File size exceeded
    delete:
      tags:
        - Topic
      summary: Delete the reply
      operationId: deleteReply
      parameters:
        - name: replyId
          in: path
          description: Id of the reply
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
        400:
          description: Invalid parameters
  /topic/reply/{replyId}/emoji:
    get:
      tags:
        - Topic
      summary: Get the emoji to the reply
      operationId: getReplyEmoji
      parameters:
        - name: replyId
          in: path
          description: Id of the reply
          required: true
          schema:
            type: integer
            format: int32
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
        - name: sort
          in: query
          description: 
            Sort
              * -operationTime - Sort by operation time. Descending.
              * +operationTime - Sort by operation time. Ascending.
          required: true
          schema:
            type: string
            default: -operationTime
        - name: emoji
          in: query
          required: true
          schema:
            type: string
            enum: *Emoji
            default: like
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmojiResult"
        400:
          description: Invalid parameters
    put:
      tags:
        - Topic
      summary: Set the emoji to the reply
      operationId: setReplyEmoji
      parameters:
        - name: replyId
          in: path
          description: Id of the reply
          required: true
          schema:
            type: integer
            format: int32
        - name: emoji
          in: query
          description: 
            Emoji
              * surprised
              * laugh
              * agree
              * wink
              * like
              * cry
          required: true
          schema:
            type: string
            enum: *Emoji
      responses:
        200:
          description: OK
        400:
          description: Invalid parameters
    delete:
      tags:
        - Topic
      summary: Remove the emoji to the reply
      operationId: removeReplyEmoji
      parameters:
        - name: replyId
          in: path
          description: Id of the reply
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
        400:
          description: Invalid parameters
  /topic/{topicId}/conclusion:
    post:
      tags:
        - Topic
      summary: Create a conclusion
      description: Create a conclusion in the topic of reply
      operationId: createConclusion
      parameters:
        - name: topicId
          in: path
          description: Id of the topic
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReplyConclusionCreationData"
        required: true
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: integer
                format: int32
        400:
          description: Invalid parameters
        404:
          description: Create Forum Error
        413:
          description: File size exceeded
  /topic/conclusion/{replyId}:
    put:
      tags:
        - Topic
      summary: Update the reply conclusion
      operationId: updateConclusion
      parameters:
        - name: replyId
          in: path
          description: Id of the reply
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReplyConclusionUpdatedData"
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplyListDetail"
        400:
          description: Invalid parameters
        404:
          description: Update failed
        409:
          description: Conflict
        413:
          description: File size exceeded
  /community/dependence:
    post:
      tags:
        - Community
      summary: to create attached community
      description: Used to create attached community information
      operationId: createAttachedCommunity
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttachedCommunityData"
        description: 
          grpupId describes communty group id
          * createUserId describes creation of userId
        required: true
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: integer
                format: int32
        202:
          description: existed name
        400:
          description: Bad Request
        404:
          description: Create Community Error
  /community/dependence/{groupId}:
    put:
      tags:
        - Community
      summary: to update attached community
      description: Used to update attached community information
      operationId: updateAttachedCommunity
      parameters:
        - name: groupId
          in: path
          description: groupId from myDms
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAttachedCommunityData"
        description: 
          updateUserId describes update of userId
        required: true
      responses:
        200:
          description: Success
        400:
          description: Bad Request
        404:
          description: update Community Error
    delete:
      tags:
        - Community
      summary: Lock attached community
      description: Lock attached community
      operationId: lockAttachedCommunity
      parameters:
        - name: groupId
          in: path
          description: groupId from myDms
          required: true
          schema:
            type: string
        - name: userId
          in: query
          description: User id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
        400:
          description: Bad Request
  /community/topic/latest:
    get:
      tags:
        - Community
      summary: Get the latest topics of the community
      operationId: getLatestTopicsOfAllCommunity
      parameters:
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LatestTopic"
        400:
          description: Bad Request
  /topic/{userId}/participated:
    get:
      tags:
        - Topic
      summary: Get the participated topics of the user
      operationId: getParticipatedTopicsOfUser
      parameters:
        - name: userId
          in: path
          description: User id
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ParticipatedTopic"
        400:
          description: Bad Request
  /community/{communityId}/attachment:
    get:
      tags:
        - Community
      summary: Get the attachments of the community
      operationId: getAttachmentOfCommunity
      parameters:
        - name: communityId
          in: path
          description: Community id
          required: true
          schema:
            type: integer
            format: int32
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
        - name: sort
          in: query
          description: 
            Sort
              * -updateTime - Sort by Update time. Descending.
              * +name - Sort by Attacment's name. Ascending.
              * -type - Sort by file extension. Descending.
          required: true
          schema:
            type: string
        - name: fileExt
          in: query
          description: file extension list
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttachmentSearchResult"
        400:
          description: Bad Request
  /bookmark/{userId}/topic/bookmarks:
    get:
      tags:
        - Bookmark
      summary: List the bookmarks of topic
      operationId: getTopicListOfBookmark
      parameters:
        - name: userId
          in: path
          description: Id of the user
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
        - name: sort
          in: query
          description: 
            Sort
              * -bookmarkCreateTime - Sort by bookmark Create Time. Descending.
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TopicResultOfBookmark"
        400:
          description: Invalid parameters
  /privilegedCommunityForum/getPrivilegedCommunityForumIds:
    get:
      tags:
        - PrivilegedCommunityForum
      summary: Get the list of privileged community and forum IDs
      description: Get the list of privileged community and forum IDs (called by mes)
      operationId: getPrivilegedCommunityForumIds
      parameters:
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PrivilegedCommunityForum"
        204:
          description: No Content
        300:
          description: Multiple Choices
  /notify:
    get:
      tags:
        - Notify
      summary: Get the notifications of the user
      description: Get the notifications of the user
      operationId: getNotificationOfUser
      parameters:
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationResultList"
        400:
          description: Invalid parameters
    put:
      tags:
        - Notify
      summary: Renew the last access time of the notification
      operationId: renewAccessTimeOfNotification
      responses:
        200:
          description: OK
        400:
          description: Invalid parameters
  /notify/{notificationId}:
    get:
      tags:
        - Notify
      summary: Get the notification
      description: Get the notification
      operationId: getNotification
      parameters:
        - name: notificationId
          in: path
          description: Notification id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublishMessage"
        400:
          description: Invalid parameters
        401:
          description: Not authorized
    patch:
      tags:
        - Notify
      summary: Read the notification
      description: Read the notification
      operationId: readNotification
      parameters:
        - name: notificationId
          in: path
          description: Notification id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
        400:
          description: Invalid parameters
        401:
          description: Not authorized
  /deltaPoint/{userId}:
    get:
      tags:
        - DeltaPoint
      summary: Get Delta Point of the user
      description: Get Delta Point of the user
      operationId: getDeltaPointResult
      parameters:
        - name: userId
          in: path
          description: Id of the user
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DeltaPointInfo"
        400:
          description: Invalid parameters
  /deltaPoint/lineChart/{userId}:
    get:
      tags:
        - DeltaPoint
      summary: Get Delta Point LineChart of the user
      description: Get Delta Point LineChart of the user
      operationId: getDeltaPointLineChart
      parameters:
        - name: userId
          in: path
          description: Id of the user
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeltaPointLineChart"
        400:
          description: Invalid parameters
  /deltaPoint/detail/{userId}:
    get:
      tags:
        - DeltaPoint
      summary: Get Delta Point Detail of the user
      description: Get Delta Point Detail of the user
      operationId: getDeltaPointDetail
      parameters:
        - name: userId
          in: path
          description: Id of the user
          required: true
          schema:
            type: string
        - name: type
          in: query
          description: 
            type
              * thisWeek
              * thisMonth
              * threeMonths
          required: true
          schema:
            type: string
            enum:
              - thisWeek
              - thisMonth
              - threeMonths
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DeltaPointInfo"
        400:
          description: Invalid parameters
  /personwordcloud:
    get:
      tags:
        - Personwordcloud
      summary: get the data of personWordCloud
      operationId: getPersonWordCloud
      parameters:
        - name: id
          in: query
          description: userId
          required: true
          schema:
            type: string
        - name: topn
          in: query
          description: topn
          required: true
          schema:
            type: integer
            format: int32
        - name: lang
          in: query
          description: system language
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
  /forum/{forumId}/pin:
    patch:
      tags:
        - Forum
      summary: pin a forum
      operationId: updatPinOfForum
      parameters:
        - name: forumId
          in: path
          description: Id of the forum
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pin"
        description: to pin or unpin forum
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid parameters
  /forum/{forumId}/priority/{toppingOrder}:
    patch:
      tags:
        - Forum
      summary: to change priority of the top forum
      operationId: updatPriorityOfForum
      parameters:
        - name: forumId
          in: path
          description: Id of the forum
          required: true
          schema:
            type: integer
            format: int32
        - name: toppingOrder
          in: path
          description: the top order of forum
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid parameters
  /community/{communityId}/announcement:
    post:
      tags:
        - Community
      summary: create Community announcement img
      description: create announcement of community
      operationId: createCommunityAnnouncement
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Announcement"
        description: Announcement Text
        required: true
      responses:
        200:
          description: Success
        404:
          description: create Community announcement Error
    get:
      tags:
        - Community
      summary: get Community announcement
      description: get Community announcement by communityId
      operationId: getCommunityAnnouncement
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
        404:
          description: get Community announcement img Error
    delete:
      tags:
        - Community
      summary: delete Community announcement
      description: delete Community announcement by communityId
      operationId: deleteCommunityAnnouncement
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Success
        404:
          description: get Community announcement img Error
  /community/{communityId}/hotforums:
    get:
      tags:
        - Community
      summary: List the hot forums in the community
      operationId: searchHotForumList
      parameters:
        - name: communityId
          in: path
          description: Id of the community
          required: true
          schema:
            type: integer
            format: int32
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HotForumSearchResult"
        400:
          description: Invalid parameters
  /topic/{topicId}/pin:
    patch:
      tags:
        - Topic
      summary: pin a topic
      operationId: updatePinOfTopic
      parameters:
        - name: topicId
          in: path
          description: topic id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pin"
        description: to pin or unpin the topic
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid parameters
  /topic/{topicId}/pin/{toppingOrder}:
    patch:
      tags:
        - Topic
      summary: to change the topping order of the topic
      operationId: updateToppingOrderOfTopic
      parameters:
        - name: topicId
          in: path
          description: topic id
          required: true
          schema:
            type: integer
            format: int32
        - name: toppingOrder
          in: path
          description: the topping order of the topic
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid parameters
  /community/{communityId}/hottopics:
    get:
      tags:
        - Community
      summary: List the hot topic in the community
      operationId: searchHotTopicList
      parameters:
        - name: communityId
          in: path
          description: Id of the community
          required: true
          schema:
            type: integer
            format: int32
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TopicSearchResult"
        400:
          description: Invalid parameters
  /community/{communityId}/privilegedForum:
    get:
      tags:
        - Community
      summary: List the forum list that user can post the topic in the community
      operationId: getPrivilegedForumOfCommunity
      parameters:
        - name: communityId
          in: path
          description: Id of the community
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IdNameDto"
        400:
          description: Invalid parameters
  /file/{fileId}/click:
    get:
      tags:
        - File
      summary: click the file
      operationId: clickFile
      parameters:
        - name: fileId
          in: path
          description: Id of the file
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        400:
          description: Invalid parameters
  /info:
    get:
      tags:
        - Info
      summary: Get version
      operationId: getInfo
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Info"
        401:
          description: Not login
  /community/{communityId}/activity/members:
    get:
      tags:
        - Community
      summary: Get active member list of the community
      operationId: getActiveMemberListOfCommunity
      parameters:
        - name: communityId
          in: path
          description: Id of the community
          required: true
          schema:
            type: integer
            format: int32
        - $ref: "#/components/parameters/LimitParam"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActiveMemberListResult"
        400:
          description: Invalid parameters
  /community/{communityId}/close:
    patch:
      tags:
        - Community
      summary: Close general community
      description: Close general community
      operationId: closeGeneralCommunity
      parameters:
        - name: communityId
          in: path
          description: communityId
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClosedCommunityData"
        description: 
          communityModifiedTime is the community modifiedTime
        required: true
      responses:
        200:
          description: Success
        400:
          description: Bad Request
        409:
          description: Conflict
  /community/{communityId}/reopening:
    patch:
      tags:
        - Community
      summary: reopen general community
      description: reopen general community
      operationId: reopenGeneralCommunity
      parameters:
        - name: communityId
          in: path
          description: communityId
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReopenedCommunityData"
        description: 
          communityModifiedTime is the community modifiedTime
        required: true
      responses:
        200:
          description: Success
        400:
          description: Bad Request
        409:
          description: Conflict
  /community/list:
    get:
      tags:
        - Community
      summary: List the search result
      operationId: communityList
      parameters:
        - $ref: "#/components/parameters/CommunityCategoryParam"
        - $ref: "#/components/parameters/SearchScopeParam"
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
        - $ref: "#/components/parameters/CommunitySortParam"
        - $ref: "#/components/parameters/UserIdParam"
        - $ref: "#/components/parameters/ExcludeCommunityStatusParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunityResultList"
        400:
          description: Invalid parameters
  /community/list/search:
    get:
      tags:
        - Community
      summary: List the search result
      operationId: searchCommunityList
      parameters:
        - name: q
          in: query
          description: Query term
          required: false
          schema:
            type: string
            default: ""
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
        - name: sort
          in: query
          description: 
            Sort
              * -updateTime - Sort by Update time.
              * -relevance - Sort by relevance.
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/SearchTypeParam"
        - name: searchActivity
          in: query
          description: Search activity (search/ filterQuerySearch/ mainQuerySearch/
            pageQuerySearch/ sortQuerySearch. default value is search)
          required: false
          schema:
            type: string
            enum:
              - search
              - filterQuerySearch
              - mainQuerySearch
              - pageQuerySearch
              - sortQuerySearch
            default: search
        - $ref: "#/components/parameters/ExcludeCommunityStatusParam"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunityResultList"
        400:
          description: Invalid parameters
  /community/list/category:
    get:
      tags:
        - Community
      summary: List the category result
      operationId: searchCommunityCategory
      parameters:
        - name: q
          in: query
          description: Query term
          required: false
          schema:
            type: string
            default: ""
        - $ref: "#/components/parameters/SearchTypeParam"
        - $ref: "#/components/parameters/ExcludeCommunityStatusParam"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
        400:
          description: Invalid parameters
  /community/{communityId}/forum/list:
    get:
      tags:
        - Community
      summary: List the forums in the community
      operationId: getForumListOfCommunity
      parameters:
        - name: communityId
          in: path
          description: Id of the community
          required: true
          schema:
            type: integer
            format: int32
        - name: forumType
          in: query
          description: Forum type
          required: false
          schema:
            type: array
            items:
              type: string
              enum: *ForumType
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
        - $ref: "#/components/parameters/ForumSortParam"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunityResultList"
        400:
          description: Invalid parameters
  /community/{communityId}/hotforum/list:
    get:
      tags:
        - Community
      summary: List the hot forums in the community
      operationId: getHotForumListOfCommunity
      parameters:
        - name: communityId
          in: path
          description: Id of the community
          required: true
          schema:
            type: integer
            format: int32
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunityResultList"
        400:
          description: Invalid parameters
  /community/{communityId}/toppingforum/list:
    get:
      tags:
        - Community
      summary: List the topping forums in the community
      operationId: getToppingForumListOfCommunity
      parameters:
        - name: communityId
          in: path
          description: Id of the community
          required: true
          schema:
            type: integer
            format: int32
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunityResultList"
        400:
          description: Invalid parameters
  /community/{communityId}/list/search:
    get:
      tags:
        - Community
      summary: List the search result
      operationId: searchInCommunity
      parameters:
        - name: communityId
          in: path
          description: Id of the community
          required: true
          schema:
            type: integer
            format: int32
        - name: q
          in: query
          description: Query term
          required: false
          schema:
            type: string
            default: ""
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
        - name: sort
          in: query
          description: 
            Sort
              * -updateTime - Sort by update time. Descending.
              * -relevance - Sort by relevance. Descending.
              * -type - Sort by topic type. Descending.
          required: true
          schema:
            type: string
        - name: state
          in: query
          description: 
            unconcluded * concluded 
          required: false
          schema:
            type: string
        - name: fileExt
          in: query
          description: file extension list
          required: false
          schema:
            type: array
            items:
              type: string
        - $ref: "#/components/parameters/SearchTypeParam"
        - name: searchActivity
          in: query
          description: Search activity (search/ filterQuerySearch/ mainQuerySearch/
            pageQuerySearch/ sortQuerySearch. default value is search)
          required: false
          schema:
            type: string
            enum:
              - search
              - filterQuerySearch
              - mainQuerySearch
              - pageQuerySearch
              - sortQuerySearch
            default: search
        - name: type
          in: query
          description: refer to TopicType
          required: false
          schema:
            type: string
        - name: forumId
          in: query
          description: Forum Id
          required: false
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunityResultList"
        400:
          description: Invalid parameters
  /community/{communityId}/topic/list:
    get:
      tags:
        - Community
      summary: List the topics in the community
      operationId: getTopicListOfCommunity
      parameters:
        - name: communityId
          in: path
          description: Id of the community
          required: true
          schema:
            type: integer
            format: int32
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
        - name: sort
          in: query
          description: 
            Sort
              * -updateTime - Sort by Update time. Descending.
              * -type - Sort by Topic's type. Descending (system, problem, general).
              * -state - Sort by Topic's state. Descending (unconcluded first).
              * +state - Sort by Topic's state. Ascending (concluded first).
          required: true
          schema:
            type: string
        - name: state
          in: query
          description: 
            State
            * unconcluded 
            * concluded 
            * briefConcluded
          required: false
          schema:
            type: string
        - name: type
          in: query
          description: refer to TopicType
          required: false
          schema:
            type: string
        - name: forumId
          in: query
          description: Forum Id
          required: false
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunityResultList"
        400:
          description: Invalid parameters
  /forum/{forumId}/topic/list:
    get:
      tags:
        - Forum
      summary: List the topics in the forum
      operationId: getTopicListOfForum
      parameters:
        - name: forumId
          in: path
          description: Id of the forum
          required: true
          schema:
            type: integer
            format: int32
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
        - $ref: "#/components/parameters/TopicSortParam"
        - name: state
          in: query
          description:
            State
            * unconcluded
            * concluded
            * briefConcluded
          required: false
          schema:
            type: string
        - name: type
          in: query
          description: refer to TopicType
          required: false
          schema:
            type: string
        - name: withTopping
          in: query
          description: filter topping ammounts or not
          required: false
          schema:
            type: boolean
            default: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunityResultList"
        400:
          description: Invalid parameters
  /forum/{forumId}/toppingtopic/list:
    get:
      tags:
        - Forum
      summary: List the topping topics in the forum
      operationId: getToppingTopicListOfForum
      parameters:
        - name: forumId
          in: path
          description: Id of the forum
          required: true
          schema:
            type: integer
            format: int32
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunityResultList"
        400:
          description: Invalid parameters
  /community/{communityId}/hottopic/list:
    get:
      tags:
        - Community
      summary: List the hot topic in the community
      operationId: getHotTopicListOfCommunity
      parameters:
        - name: communityId
          in: path
          description: Id of the community
          required: true
          schema:
            type: integer
            format: int32
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunityResultList"
        400:
          description: Invalid parameters
  /forum/{forumId}/list/search:
    get:
      tags:
        - Forum
      summary: List the search result
      operationId: searchInForum
      parameters:
        - name: forumId
          in: path
          description: Id of the forum
          required: true
          schema:
            type: integer
            format: int32
        - name: q
          in: query
          description: Query term
          required: false
          schema:
            type: string
            default: ""
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
        - name: sort
          in: query
          description: 
            Sort
              * -updateTime - Sort by update time. Descending.
              * -relevance - Sort by relevance. Descending.
              * -type - Sort by topic type. Descending.
          required: true
          schema:
            type: string
        - name: state
          in: query
          description: 
            unconcluded * concluded 
          required: false
          schema:
            type: string
        - name: fileExt
          in: query
          description: file extension list
          required: false
          schema:
            type: array
            items:
              type: string
        - $ref: "#/components/parameters/SearchTypeParam"
        - name: searchActivity
          in: query
          description: Search activity (search/ filterQuerySearch/ mainQuerySearch/
            pageQuerySearch/ sortQuerySearch. default value is search)
          required: false
          schema:
            type: string
            enum:
              - search
              - filterQuerySearch
              - mainQuerySearch
              - pageQuerySearch
              - sortQuerySearch
            default: search
        - name: type
          in: query
          description: refer to TopicType
          required: false
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunityResultList"
        400:
          description: Invalid parameters
  /community/{communityId}/attachment/list:
    get:
      tags:
        - Community
      summary: Get the attachments of the community
      operationId: getAttachmentListOfCommunity
      parameters:
        - name: communityId
          in: path
          description: Community id
          required: true
          schema:
            type: integer
            format: int32
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
        - name: fileExt
          in: query
          description: file extension list
          required: false
          schema:
            type: array
            items:
              type: string
        - name: sort
          in: query
          description: 
            Sort
              * -updateTime - Sort by Update time. Descending.
              * +name - Sort by Attacment's name. Ascending.
              * -type - Sort by file extension. Descending.
          required: false
          schema:
            type: string
            default: -updateTime
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunityResultList"
        400:
          description: Bad Request
  /forum/{forumId}/admins:
    get:
      tags:
        - Forum
      summary: Get the admins of the forum
      operationId: getAdminListOfForum
      parameters:
        - $ref: "#/components/parameters/UserIdParam"
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
        - $ref: "#/components/parameters/MemberSortParam"
        - name: forumId
          in: path
          description: Id of the forum
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MemberListResult"
        400:
          description: Invalid parameters
  /community/privilegedCommunity:
    get:
      tags:
        - Community
      summary: List the Community list with admin privilege
      operationId: getPrivilegedAllCommunity
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IdNameDto"
        400:
          description: Invalid parameters
  /topic/eerp:
    post:
      tags:
        - Eerp
      summary: Create a eerp topic
      description: Create a eerp topic in the forum
      operationId: createEerpTopic
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EerpTopicCreationData"
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: integer
                format: int32
        400:
          description: Invalid parameters
        404:
          description: Create pqm Error
  /topic/eerp/{topicId}:
    put:
      tags:
        - Eerp
      summary: Update the eerp topic information
      operationId: updateEerpTopic
      parameters:
        - name: topicId
          in: path
          description: Id of the topic
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EerpTopicData"
        required: true
      responses:
        200:
          description: Success
        400:
          description: Invalid parameters
        404:
          description: Update failed
  /ddf:
    post:
      tags:
        - Ddf
      summary: Sync ddf of community
      operationId: syncDdf
      parameters:
        - name: action
          in: query
          description: Action
          required: true
          schema:
            $ref: "#/components/schemas/DdfQueueAction"
      responses:
        200:
          description: Success
        400:
          description: Invalid parameters
  /topic/eerpm/errorcode:
    get:
      tags:
        - Eerp
      summary: get eerpm ErrorCode by deviceModel
      operationId: getEerpmErrorCode
      parameters:
        - name: deviceModel
          in: query
          description: Device Model
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EerpmErrorCodeDto"
        400:
          description: Invalid parameters
  /topic/eerpm/errorcause:
    get:
      tags:
        - Eerp
      summary: get eerpm ErrorCause by deviceModel and errorCode
      operationId: getEerpmErrorCause
      parameters:
        - name: deviceModel
          in: query
          description: Device Model
          required: true
          schema:
            type: string
        - name: errorCode
          in: query
          description: Error Code
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EerpmErrorCauseDto"
        400:
          description: Invalid parameters
  /topic/eerpm/errorsolution:
    get:
      tags:
        - Eerp
      summary: get eerpm ErrorSolution by deviceModel, errorCode and errorCause
      operationId: getEerpmErrorSolution
      parameters:
        - name: deviceModel
          in: query
          description: Device Model
          required: true
          schema:
            type: string
        - name: errorCode
          in: query
          description: Error Code
          required: true
          schema:
            type: string
        - name: errorCause
          in: query
          description: Error Cause
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EerpmErrorSolutionDto"
        400:
          description: Invalid parameters
  /topic/eerpq/code:
    get:
      tags:
        - Eerp
      summary: get eerpq code
      operationId: getEerpqCode
      parameters:
        - name: pageNum
          in: query
          schema:
            type: integer
            format: int32
            default: -1
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
            default: -1
        - name: type
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/EerpqCodeType"
        - name: factory
          in: query
          required: true
          schema:
            type: string
        - name: phenomenonCode
          in: query
          schema:
            type: string
        - name: dutyCode
          in: query
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EerpqCodeDto"
        400:
          description: Invalid parameters
  /forum/{forumId}/alert:
    get:
      tags:
        - ConclusionAlert
      summary: Get alert rules in the forum
      operationId: getForumConclusionAlert
      parameters:
        - name: forumId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConclusionAlertDetail"
        400:
          description: Invalid parameters
        401:
          description: Not login
        403:
          description: Permission denied
        404:
          description: The specified resource was not found
  /forum/{forumId}/alert/group:
    post:
      tags:
        - ConclusionAlert
      summary: upsert alert rules in the forum
      operationId: upsertForumConclusionAlertGroup
      parameters:
        - name: forumId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConclusionAlertGroupDetail"
      responses:
        200:
          description: Success
        400:
          description: Invalid parameters
        401:
          description: Not login
        403:
          description: Permission denied
        409:
          description: Conflict
  /forum/{forumId}/alert/rule/{ruleType}:
    post:
      tags:
        - ConclusionAlert
      summary: upsert alert rules in the forum
      operationId: upsertForumConclusionAlertRule
      parameters:
        - name: forumId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: ruleType
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/AlertRuleType"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConclusionAlertRuleDetail"
      responses:
        200:
          description: Success
        400:
          description: Invalid parameters
        401:
          description: Not login
        403:
          description: Permission denied
        409:
          description: Conflict
  /forum/{forumId}/alert/members:
    get:
      tags:
        - ConclusionAlert
      summary: Search for the members by their name
      operationId: searchMemberByName
      parameters:
        - name: forumId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: q
          in: query
          description: query name
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/LimitParam"
        - name: withGroup
          in: query
          required: true
          schema:
            type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ConclusionAlertMember"
        400:
          description: Invalid parameters
  /topic/conclusion/alert:
    post:
      tags:
        - ConclusionAlert
      summary: alert all unconcluded topics
      operationId: alertAllUnconcludedTopics
      responses:
        200:
          description: Success
        401:
          description: Not login
        403:
          description: Permission denied
  /topic/eerp/report/conclusion:
    post:
      tags:
        - Eerp
      summary: generate conclusion report to MyDms
      operationId: generateEerpConclusionReport
      parameters:
        - name: type
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/EerpType"
        - name: startTime
          in: query
          required: false
          schema:
            type: integer
            format: int64
            default: -1
        - name: endTime
          in: query
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
        401:
          description: Not login
        403:
          description: Permission denied
  /dia/attachment:
    post:
      tags:
        - Dia
      summary: download attachments and create ddf of dia topics
      operationId: createAllDiaAttachment
      responses:
        200:
          description: OK
        401:
          description: Not login
        403:
          description: Permission denied
  /dia/topic:
    post:
      tags:
        - Dia
      summary: create all dia topics
      operationId: createAllDiaTopic
      responses:
        200:
          description: OK
        401:
          description: Not login
        403:
          description: Permission denied
  /community/{communityId}/dashboard/date:
    get:
      tags:
        - Dashboard
      summary: Get dashboard date
      operationId: getDashboardDate
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardDateDto"
        400:
          description: Invalid parameters
        403:
          description: Permission denied
        404:
          description: The specified resource was not found
  /community/{communityId}/dashboard/{date}:
    get:
      tags:
        - Dashboard
      summary: Get Eerp dashboard
      operationId: getEerpDashboard
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: date
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EerpDashboardDto"
        400:
          description: Invalid parameters
        403:
          description: Permission denied
        404:
          description: The specified resource was not found
  /community/{communityId}/dashboard/eerpm/{date}/topic:
    post:
      tags:
        - Dashboard
      summary: Search Eerpm topic list
      operationId: searchEerpmDashboardTopic
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: date
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EerpDashboardFilterDto"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EerpmDashboardTopicDto"
        400:
          description: Invalid parameters
        403:
          description: Permission denied
        404:
          description: The specified resource was not found
  /community/{communityId}/dashboard/eerpm/{date}/device:
    post:
      tags:
        - Dashboard
      summary: Search Eerpm device list
      operationId: searchEerpmDashboardDevice
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: date
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EerpDashboardFilterDto"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EerpmDashboardDeviceDto"
        400:
          description: Invalid parameters
        403:
          description: Permission denied
        404:
          description: The specified resource was not found
  /community/{communityId}/dashboard/eerpm/{date}/device/history:
    get:
      tags:
        - Dashboard
      summary: Get a Eerpm device's history
      operationId: getEerpmDashboardDeviceHistory
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: date
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: factory
          in: query
          description: Factory
          required: true
          schema:
            type: string
        - name: forum
          in: query
          description: Forum name
          required: true
          schema:
            type: string
        - name: deviceModel
          in: query
          description: Device Model
          required: true
          schema:
            type: string
        - name: errorCode
          in: query
          description: Error Code
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChartDto"
        400:
          description: Invalid parameters
        403:
          description: Permission denied
        404:
          description: The specified resource was not found
  /dropdown/appField:
    get:
      tags:
        - Dropdown
      summary: Get ApplicationField dropdown list
      operationId: getAppFieldDropdownList
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LabelValueDto"
        400:
          description: Invalid parameters
        401:
          description: Not login
  /community/{communityId}/awards:
    get:
      tags:
        - Community
      summary: get Community records
      description: get Community awards by communityId
      operationId: getCommunityAwards
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AwardDto"
        400:
          description: Invalid parameters
        401:
          description: Not login
  /community/{communityId}/medals:
    get:
      tags:
        - Community
      summary: get Community medals
      description: get Community medals by communityId
      operationId: getCommunityMedals
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MedalDto"
        400:
          description: Invalid parameters
        401:
          description: Not login
  /community/{communityId}/dashboard/eerpp/{date}/topic:
    post:
      tags:
        - Dashboard
      summary: Search Eerpp topic list
      operationId: searchEerppDashboardTopic
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: date
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EerpDashboardFilterDto"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EerppDashboardTopicDto"
        400:
          description: Invalid parameters
        403:
          description: Permission denied
        404:
          description: The specified resource was not found
  /community/{communityId}/dashboard/eerpp/{date}/device:
    post:
      tags:
        - Dashboard
      summary: Search Eerpp device list
      operationId: searchEerppDashboardDevice
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: date
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EerpDashboardFilterDto"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EerppDashboardDeviceDto"
        400:
          description: Invalid parameters
        403:
          description: Permission denied
        404:
          description: The specified resource was not found
  /community/{communityId}/dashboard/eerpp/{date}/device/history:
    get:
      tags:
        - Dashboard
      summary: Get a Eerpp device's history
      operationId: getEerppDashboardDeviceHistory
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: date
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: factory
          in: query
          description: Factory
          required: true
          schema:
            type: string
        - name: forum
          in: query
          description: Forum name
          required: true
          schema:
            type: string
        - name: lossCode
          in: query
          description: Loss Code
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChartDto"
        400:
          description: Invalid parameters
        403:
          description: Permission denied
        404:
          description: The specified resource was not found
  /dropdown/recordType:
    get:
      tags:
        - Dropdown
      summary: Get RecordType dropdown list
      operationId: getRecordTypeDropdownList
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LabelValueDto"
        401:
          description: Not login
  /file/archive:
    post:
      tags:
        - FileArchive
      summary: archive files to MyDMS
      operationId: archiveFiles
      responses:
        200:
          description: Success
        401:
          description: Not login
        403:
          description: Permission denied
  /topic/{topicId}/privilege/{operation}:
    get:
      tags:
        - Topic
      summary: Validate privilege of topic
      operationId: validateTopicPrivilege
      parameters:
        - name: topicId
          in: path
          description: Id of the topic
          required: true
          schema:
            type: integer
            format: int32
        - name: operation
          in: path
          description: operation
          required: true
          schema:
            $ref: "#/components/schemas/TopicOperation"
      responses:
        200:
          description: OK
        400:
          description: Invalid parameters
        403:
          description: Permission denied
  /topic/reply/{replyId}/privilege/{operation}:
    get:
      tags:
        - Topic
      summary: Validate privilege of reply
      operationId: validateReplyPrivilege
      parameters:
        - name: replyId
          in: path
          description: Id of the reply
          required: true
          schema:
            type: integer
            format: int32
        - name: operation
          in: path
          description: operation
          required: true
          schema:
            $ref: "#/components/schemas/ReplyOperation"
      responses:
        200:
          description: OK
        400:
          description: Invalid parameters
        403:
          description: Permission denied
  /topic/{topicId}/forumType:
    get:
      tags:
        - Topic
      summary: Get forumType of topic
      operationId: getForumTypeByTopicId
      parameters:
        - name: topicId
          in: path
          description: Id of the topic
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid parameters
  /integrate/checkCommunityHasAppGroup:
    get:
      tags:
        - Integration
      summary: =For 3/2 Integration only, Please contact Yvonne.Zheng to run= Create 2 UserGroup for each community
      operationId: createCommunityAppGroup
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int32
        400:
          description: Invalid parameters
  /integrate/community:
    get:
      tags:
        - Integration
      summary: =For 3/2 Integration only, Please contact Yvonne.Zheng to run= Integrate for community uid to gid
      operationId: integrateCommunityRole
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int32
        400:
          description: Invalid parameters
  /integrate/checkForumHasAppGroup:
    get:
      tags:
        - Integration
      summary: =For 3/2 Integration only, Please contact Yvonne.Zheng to run= Create 2 UserGroup for each forum
      operationId: createForumAppGroup
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int32
        400:
          description: Invalid parameters
  /integrate/forum:
    get:
      tags:
        - Integration
      summary: =For 3/2 Integration only, Please contact Yvonne.Zheng to run= Integrate for forum uid to gid
      operationId: integrateForumRole
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int32
        400:
          description: Invalid parameters
  /integrate/ddf:
    get:
      tags:
        - Integration
      summary: =For Integration only, Please contact Yvonne.Zheng to run= Integrate for ddf uid to gid
      operationId: integrateDdf
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int32
        400:
          description: Invalid parameters
  /integrate/orgCommunity:
    get:
      tags:
        - Integration
      summary: =For Integration only, Please contact Yvonne.Zheng to run= Integrate for ddf uid to gid
      operationId: integrateOrgCommunity
      parameters:
        - name: startTime
          in: query
          required: true
          schema:
            type: integer
            format: int64
            default: -1
        - name: endTime
          in: query
          required: false
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int32
        400:
          description: Invalid parameters
  /communitysync/drcsync:
    post:
      tags:
        - CommunitySync
      summary: Synchronize the topics under the specified community ID with DRC.
      operationId: synchronizeCommunityTopics
      responses:
        200:
          description: Synchronization results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncResult'
        400:
          description: Failed to synchronize
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncResult'
  /communitysync/deletedrcsync:
    delete:
      tags:
        - CommunitySync
      summary: Delete synchronized community topics within a specified time frame
      operationId: deleteSynchronizedCommunityTopics
      parameters:
        - in: query
          name: startTime
          required: true
          schema:
            type: integer
            format: int64
          description:
            The start time of the period for which topics were synchronized (in Unix timestamp format: milliseconds since epoch)
        - in: query
          name: endTime
          required: true
          schema:
            type: integer
            format: int64
          description:
            The end time of the period for which topics were synchronized (in Unix timestamp format: milliseconds since epoch)
      responses:
        200:
          description: Successful operation with results of deletion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncResult'
        400:
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncResult'